
STM32F429xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000007ec  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000998  08000998  00010998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080009a0  080009a0  000109a8  2**0
                  CONTENTS
  4 .ARM          00000000  080009a0  080009a0  000109a8  2**0
                  CONTENTS
  5 .preinit_array 00000000  080009a0  080009a8  000109a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080009a0  080009a0  000109a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080009a4  080009a4  000109a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  000109a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  080009a8  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  080009a8  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  000109a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   000017b4  00000000  00000000  000109d2  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 000004ae  00000000  00000000  00012186  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000140  00000000  00000000  00012638  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000108  00000000  00000000  00012778  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00001ed5  00000000  00000000  00012880  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000010bc  00000000  00000000  00014755  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00008b6e  00000000  00000000  00015811  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001e37f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00000450  00000000  00000000  0001e3fc  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000980 	.word	0x08000980

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000980 	.word	0x08000980

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <GPIO_PCLK_Control>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

void GPIO_PCLK_Control(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000208:	78fb      	ldrb	r3, [r7, #3]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d162      	bne.n	80002d4 <GPIO_PCLK_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4a65      	ldr	r2, [pc, #404]	; (80003a8 <GPIO_PCLK_Control+0x1ac>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d106      	bne.n	8000224 <GPIO_PCLK_Control+0x28>
			GPIOA_PCLK_EN();
 8000216:	4b65      	ldr	r3, [pc, #404]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021a:	4a64      	ldr	r2, [pc, #400]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800021c:	f043 0301 	orr.w	r3, r3, #1
 8000220:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx == GPIOI)
				GPIOI_PCLK_DI();
	}
}
 8000222:	e0bc      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOB)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4a62      	ldr	r2, [pc, #392]	; (80003b0 <GPIO_PCLK_Control+0x1b4>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d106      	bne.n	800023a <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_EN();
 800022c:	4b5f      	ldr	r3, [pc, #380]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a5e      	ldr	r2, [pc, #376]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000238:	e0b1      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOC)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a5d      	ldr	r2, [pc, #372]	; (80003b4 <GPIO_PCLK_Control+0x1b8>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d106      	bne.n	8000250 <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_EN();
 8000242:	4b5a      	ldr	r3, [pc, #360]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000246:	4a59      	ldr	r2, [pc, #356]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024e:	e0a6      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOD)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a59      	ldr	r2, [pc, #356]	; (80003b8 <GPIO_PCLK_Control+0x1bc>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d106      	bne.n	8000266 <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_EN();
 8000258:	4b54      	ldr	r3, [pc, #336]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800025a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025c:	4a53      	ldr	r2, [pc, #332]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000264:	e09b      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOE)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a54      	ldr	r2, [pc, #336]	; (80003bc <GPIO_PCLK_Control+0x1c0>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d106      	bne.n	800027c <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_EN();
 800026e:	4b4f      	ldr	r3, [pc, #316]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	4a4e      	ldr	r2, [pc, #312]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027a:	e090      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOF)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a50      	ldr	r2, [pc, #320]	; (80003c0 <GPIO_PCLK_Control+0x1c4>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d106      	bne.n	8000292 <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_EN();
 8000284:	4b49      	ldr	r3, [pc, #292]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a48      	ldr	r2, [pc, #288]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000290:	e085      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOG)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a4b      	ldr	r2, [pc, #300]	; (80003c4 <GPIO_PCLK_Control+0x1c8>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_EN();
 800029a:	4b44      	ldr	r3, [pc, #272]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029e:	4a43      	ldr	r2, [pc, #268]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a6:	e07a      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOH)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <GPIO_PCLK_Control+0x1cc>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_EN();
 80002b0:	4b3e      	ldr	r3, [pc, #248]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a3d      	ldr	r2, [pc, #244]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002bc:	e06f      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOI)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a42      	ldr	r2, [pc, #264]	; (80003cc <GPIO_PCLK_Control+0x1d0>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d16b      	bne.n	800039e <GPIO_PCLK_Control+0x1a2>
			GPIOI_PCLK_EN();
 80002c6:	4b39      	ldr	r3, [pc, #228]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a38      	ldr	r2, [pc, #224]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d2:	e064      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
	else if(EnorDi == DISABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d161      	bne.n	800039e <GPIO_PCLK_Control+0x1a2>
		if(pGPIOx == GPIOA)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a32      	ldr	r2, [pc, #200]	; (80003a8 <GPIO_PCLK_Control+0x1ac>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PCLK_Control+0xf4>
			GPIOA_PCLK_DI();
 80002e2:	4b32      	ldr	r3, [pc, #200]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a31      	ldr	r2, [pc, #196]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002e8:	f023 0301 	bic.w	r3, r3, #1
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ee:	e056      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOB)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a2f      	ldr	r2, [pc, #188]	; (80003b0 <GPIO_PCLK_Control+0x1b4>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PCLK_Control+0x10a>
			GPIOB_PCLK_DI();
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002fe:	f023 0302 	bic.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000304:	e04b      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOC)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a2a      	ldr	r2, [pc, #168]	; (80003b4 <GPIO_PCLK_Control+0x1b8>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PCLK_Control+0x120>
			GPIOC_PCLK_DI();
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a26      	ldr	r2, [pc, #152]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000314:	f023 0304 	bic.w	r3, r3, #4
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031a:	e040      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOD)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a26      	ldr	r2, [pc, #152]	; (80003b8 <GPIO_PCLK_Control+0x1bc>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PCLK_Control+0x136>
			GPIOD_PCLK_DI();
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800032a:	f023 0308 	bic.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000330:	e035      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOE)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a21      	ldr	r2, [pc, #132]	; (80003bc <GPIO_PCLK_Control+0x1c0>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PCLK_Control+0x14c>
			GPIOE_PCLK_DI();
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000340:	f023 0310 	bic.w	r3, r3, #16
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000346:	e02a      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOF)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <GPIO_PCLK_Control+0x1c4>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PCLK_Control+0x162>
			GPIOF_PCLK_DI();
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000356:	f023 0320 	bic.w	r3, r3, #32
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035c:	e01f      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOG)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <GPIO_PCLK_Control+0x1c8>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PCLK_Control+0x178>
			GPIOG_PCLK_DI();
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800036c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000372:	e014      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOH)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <GPIO_PCLK_Control+0x1cc>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PCLK_Control+0x18e>
			GPIOH_PCLK_DI();
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000388:	e009      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOI)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <GPIO_PCLK_Control+0x1d0>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d105      	bne.n	800039e <GPIO_PCLK_Control+0x1a2>
				GPIOI_PCLK_DI();
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40020000 	.word	0x40020000
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020400 	.word	0x40020400
 80003b4:	40020800 	.word	0x40020800
 80003b8:	40020c00 	.word	0x40020c00
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40021400 	.word	0x40021400
 80003c4:	40021800 	.word	0x40021800
 80003c8:	40021c00 	.word	0x40021c00
 80003cc:	40022000 	.word	0x40022000

080003d0 <GPIO_Init>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b085      	sub	sp, #20
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	//1. GPIO Mode configuration

	uint32_t temp = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d81e      	bhi.n	8000422 <GPIO_Init+0x52>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	461a      	mov	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	60fb      	str	r3, [r7, #12]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	4619      	mov	r1, r3
 8000402:	2303      	movs	r3, #3
 8000404:	408b      	lsls	r3, r1
 8000406:	43db      	mvns	r3, r3
 8000408:	4619      	mov	r1, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	400a      	ands	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	68fa      	ldr	r2, [r7, #12]
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
		//interrupt mode setup
	}

	//2 . GPIO Speed Configuration

	temp = 0;
 8000422:	2300      	movs	r3, #0
 8000424:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000426:	687b      	ldr	r3, [r7, #4]
 8000428:	799b      	ldrb	r3, [r3, #6]
 800042a:	461a      	mov	r2, r3
 800042c:	687b      	ldr	r3, [r7, #4]
 800042e:	791b      	ldrb	r3, [r3, #4]
 8000430:	005b      	lsls	r3, r3, #1
 8000432:	fa02 f303 	lsl.w	r3, r2, r3
 8000436:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000438:	687b      	ldr	r3, [r7, #4]
 800043a:	681b      	ldr	r3, [r3, #0]
 800043c:	689a      	ldr	r2, [r3, #8]
 800043e:	687b      	ldr	r3, [r7, #4]
 8000440:	791b      	ldrb	r3, [r3, #4]
 8000442:	4619      	mov	r1, r3
 8000444:	2303      	movs	r3, #3
 8000446:	408b      	lsls	r3, r1
 8000448:	43db      	mvns	r3, r3
 800044a:	4619      	mov	r1, r3
 800044c:	687b      	ldr	r3, [r7, #4]
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	400a      	ands	r2, r1
 8000452:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 8000454:	687b      	ldr	r3, [r7, #4]
 8000456:	681b      	ldr	r3, [r3, #0]
 8000458:	6899      	ldr	r1, [r3, #8]
 800045a:	687b      	ldr	r3, [r7, #4]
 800045c:	681b      	ldr	r3, [r3, #0]
 800045e:	68fa      	ldr	r2, [r7, #12]
 8000460:	430a      	orrs	r2, r1
 8000462:	609a      	str	r2, [r3, #8]



	//3. GPIO PullUp and PullDown configuration

	temp = 0;
 8000464:	2300      	movs	r3, #0
 8000466:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000468:	687b      	ldr	r3, [r7, #4]
 800046a:	79db      	ldrb	r3, [r3, #7]
 800046c:	461a      	mov	r2, r3
 800046e:	687b      	ldr	r3, [r7, #4]
 8000470:	791b      	ldrb	r3, [r3, #4]
 8000472:	005b      	lsls	r3, r3, #1
 8000474:	fa02 f303 	lsl.w	r3, r2, r3
 8000478:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	687b      	ldr	r3, [r7, #4]
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	68da      	ldr	r2, [r3, #12]
 8000480:	687b      	ldr	r3, [r7, #4]
 8000482:	791b      	ldrb	r3, [r3, #4]
 8000484:	4619      	mov	r1, r3
 8000486:	2303      	movs	r3, #3
 8000488:	408b      	lsls	r3, r1
 800048a:	43db      	mvns	r3, r3
 800048c:	4619      	mov	r1, r3
 800048e:	687b      	ldr	r3, [r7, #4]
 8000490:	681b      	ldr	r3, [r3, #0]
 8000492:	400a      	ands	r2, r1
 8000494:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 8000496:	687b      	ldr	r3, [r7, #4]
 8000498:	681b      	ldr	r3, [r3, #0]
 800049a:	68d9      	ldr	r1, [r3, #12]
 800049c:	687b      	ldr	r3, [r7, #4]
 800049e:	681b      	ldr	r3, [r3, #0]
 80004a0:	68fa      	ldr	r2, [r7, #12]
 80004a2:	430a      	orrs	r2, r1
 80004a4:	60da      	str	r2, [r3, #12]

	//4. GPIO Output Type configuration

	temp = 0;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60fb      	str	r3, [r7, #12]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80004aa:	687b      	ldr	r3, [r7, #4]
 80004ac:	7a1b      	ldrb	r3, [r3, #8]
 80004ae:	461a      	mov	r2, r3
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	791b      	ldrb	r3, [r3, #4]
 80004b4:	005b      	lsls	r3, r3, #1
 80004b6:	fa02 f303 	lsl.w	r3, r2, r3
 80004ba:	60fb      	str	r3, [r7, #12]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	681b      	ldr	r3, [r3, #0]
 80004c0:	685a      	ldr	r2, [r3, #4]
 80004c2:	687b      	ldr	r3, [r7, #4]
 80004c4:	791b      	ldrb	r3, [r3, #4]
 80004c6:	4619      	mov	r1, r3
 80004c8:	2301      	movs	r3, #1
 80004ca:	408b      	lsls	r3, r1
 80004cc:	43db      	mvns	r3, r3
 80004ce:	4619      	mov	r1, r3
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	681b      	ldr	r3, [r3, #0]
 80004d4:	400a      	ands	r2, r1
 80004d6:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 80004d8:	687b      	ldr	r3, [r7, #4]
 80004da:	681b      	ldr	r3, [r3, #0]
 80004dc:	6859      	ldr	r1, [r3, #4]
 80004de:	687b      	ldr	r3, [r7, #4]
 80004e0:	681b      	ldr	r3, [r3, #0]
 80004e2:	68fa      	ldr	r2, [r7, #12]
 80004e4:	430a      	orrs	r2, r1
 80004e6:	605a      	str	r2, [r3, #4]

	//5. GPIO Alternate function configuration

	temp = 0;
 80004e8:	2300      	movs	r3, #0
 80004ea:	60fb      	str	r3, [r7, #12]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 80004ec:	687b      	ldr	r3, [r7, #4]
 80004ee:	795b      	ldrb	r3, [r3, #5]
 80004f0:	2b02      	cmp	r3, #2
 80004f2:	d131      	bne.n	8000558 <GPIO_Init+0x188>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 80004f4:	687b      	ldr	r3, [r7, #4]
 80004f6:	791b      	ldrb	r3, [r3, #4]
 80004f8:	08db      	lsrs	r3, r3, #3
 80004fa:	72fb      	strb	r3, [r7, #11]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 80004fc:	687b      	ldr	r3, [r7, #4]
 80004fe:	791b      	ldrb	r3, [r3, #4]
 8000500:	f003 0307 	and.w	r3, r3, #7
 8000504:	72bb      	strb	r3, [r7, #10]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2 ));
 8000506:	687b      	ldr	r3, [r7, #4]
 8000508:	681b      	ldr	r3, [r3, #0]
 800050a:	7afa      	ldrb	r2, [r7, #11]
 800050c:	3208      	adds	r2, #8
 800050e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8000512:	7abb      	ldrb	r3, [r7, #10]
 8000514:	009b      	lsls	r3, r3, #2
 8000516:	220f      	movs	r2, #15
 8000518:	fa02 f303 	lsl.w	r3, r2, r3
 800051c:	43db      	mvns	r3, r3
 800051e:	4618      	mov	r0, r3
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	7afa      	ldrb	r2, [r7, #11]
 8000526:	4001      	ands	r1, r0
 8000528:	3208      	adds	r2, #8
 800052a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2 ));
 800052e:	687b      	ldr	r3, [r7, #4]
 8000530:	681b      	ldr	r3, [r3, #0]
 8000532:	7afa      	ldrb	r2, [r7, #11]
 8000534:	3208      	adds	r2, #8
 8000536:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	7a5b      	ldrb	r3, [r3, #9]
 800053e:	461a      	mov	r2, r3
 8000540:	7abb      	ldrb	r3, [r7, #10]
 8000542:	009b      	lsls	r3, r3, #2
 8000544:	fa02 f303 	lsl.w	r3, r2, r3
 8000548:	4618      	mov	r0, r3
 800054a:	687b      	ldr	r3, [r7, #4]
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	7afa      	ldrb	r2, [r7, #11]
 8000550:	4301      	orrs	r1, r0
 8000552:	3208      	adds	r2, #8
 8000554:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 8000558:	bf00      	nop
 800055a:	3714      	adds	r7, #20
 800055c:	46bd      	mov	sp, r7
 800055e:	bc80      	pop	{r7}
 8000560:	4770      	bx	lr

08000562 <GPIO_ReadFromInputPin>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000562:	b480      	push	{r7}
 8000564:	b085      	sub	sp, #20
 8000566:	af00      	add	r7, sp, #0
 8000568:	6078      	str	r0, [r7, #4]
 800056a:	460b      	mov	r3, r1
 800056c:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber ) & 0x00000001 );
 800056e:	687b      	ldr	r3, [r7, #4]
 8000570:	691a      	ldr	r2, [r3, #16]
 8000572:	78fb      	ldrb	r3, [r7, #3]
 8000574:	fa22 f303 	lsr.w	r3, r2, r3
 8000578:	b2db      	uxtb	r3, r3
 800057a:	f003 0301 	and.w	r3, r3, #1
 800057e:	73fb      	strb	r3, [r7, #15]
	return value;
 8000580:	7bfb      	ldrb	r3, [r7, #15]

}
 8000582:	4618      	mov	r0, r3
 8000584:	3714      	adds	r7, #20
 8000586:	46bd      	mov	sp, r7
 8000588:	bc80      	pop	{r7}
 800058a:	4770      	bx	lr

0800058c <GPIO_ToggleOutputPin>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 800058c:	b480      	push	{r7}
 800058e:	b083      	sub	sp, #12
 8000590:	af00      	add	r7, sp, #0
 8000592:	6078      	str	r0, [r7, #4]
 8000594:	460b      	mov	r3, r1
 8000596:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 1 << PinNumber);
 8000598:	687b      	ldr	r3, [r7, #4]
 800059a:	695b      	ldr	r3, [r3, #20]
 800059c:	78fa      	ldrb	r2, [r7, #3]
 800059e:	2101      	movs	r1, #1
 80005a0:	fa01 f202 	lsl.w	r2, r1, r2
 80005a4:	405a      	eors	r2, r3
 80005a6:	687b      	ldr	r3, [r7, #4]
 80005a8:	615a      	str	r2, [r3, #20]
}
 80005aa:	bf00      	nop
 80005ac:	370c      	adds	r7, #12
 80005ae:	46bd      	mov	sp, r7
 80005b0:	bc80      	pop	{r7}
 80005b2:	4770      	bx	lr

080005b4 <SPI_Init>:
 * @return			   -																				 *
 * 																										 *
 * @Note			   -																				 *
 *********************************************************************************************************/
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80005b4:	b480      	push	{r7}
 80005b6:	b085      	sub	sp, #20
 80005b8:	af00      	add	r7, sp, #0
 80005ba:	6078      	str	r0, [r7, #4]
	uint32_t tempReg = 0;
 80005bc:	2300      	movs	r3, #0
 80005be:	60fb      	str	r3, [r7, #12]
	// 1. Device Mode
	tempReg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR;
 80005c0:	687b      	ldr	r3, [r7, #4]
 80005c2:	791b      	ldrb	r3, [r3, #4]
 80005c4:	009b      	lsls	r3, r3, #2
 80005c6:	461a      	mov	r2, r3
 80005c8:	68fb      	ldr	r3, [r7, #12]
 80005ca:	4313      	orrs	r3, r2
 80005cc:	60fb      	str	r3, [r7, #12]
	// 2. Bus Config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80005ce:	687b      	ldr	r3, [r7, #4]
 80005d0:	795b      	ldrb	r3, [r3, #5]
 80005d2:	2b00      	cmp	r3, #0
 80005d4:	d104      	bne.n	80005e0 <SPI_Init+0x2c>
	{
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80005dc:	60fb      	str	r3, [r7, #12]
 80005de:	e014      	b.n	800060a <SPI_Init+0x56>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 80005e0:	687b      	ldr	r3, [r7, #4]
 80005e2:	795b      	ldrb	r3, [r3, #5]
 80005e4:	2b01      	cmp	r3, #1
 80005e6:	d104      	bne.n	80005f2 <SPI_Init+0x3e>
	{
		tempReg |= (1 << SPI_CR1_BIDIMODE);
 80005e8:	68fb      	ldr	r3, [r7, #12]
 80005ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ee:	60fb      	str	r3, [r7, #12]
 80005f0:	e00b      	b.n	800060a <SPI_Init+0x56>
	}
	else if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RX_ONLY)
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	795b      	ldrb	r3, [r3, #5]
 80005f6:	2b03      	cmp	r3, #3
 80005f8:	d107      	bne.n	800060a <SPI_Init+0x56>
	{
		tempReg &= ~(1 << SPI_CR1_BIDIMODE);
 80005fa:	68fb      	ldr	r3, [r7, #12]
 80005fc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000600:	60fb      	str	r3, [r7, #12]
		tempReg |= (1 << SPI_CR1_RXONLY);
 8000602:	68fb      	ldr	r3, [r7, #12]
 8000604:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000608:	60fb      	str	r3, [r7, #12]
	}
	//3. SPI serial clock
	tempReg |= pSPIHandle->SPIConfig.SPI_CLKSpeed << SPI_CR1_BR;
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	799b      	ldrb	r3, [r3, #6]
 800060e:	00db      	lsls	r3, r3, #3
 8000610:	461a      	mov	r2, r3
 8000612:	68fb      	ldr	r3, [r7, #12]
 8000614:	4313      	orrs	r3, r2
 8000616:	60fb      	str	r3, [r7, #12]

	//4. DFF
	tempReg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	79db      	ldrb	r3, [r3, #7]
 800061c:	02db      	lsls	r3, r3, #11
 800061e:	461a      	mov	r2, r3
 8000620:	68fb      	ldr	r3, [r7, #12]
 8000622:	4313      	orrs	r3, r2
 8000624:	60fb      	str	r3, [r7, #12]

	//5. CPOL

	tempReg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	7a1b      	ldrb	r3, [r3, #8]
 800062a:	005b      	lsls	r3, r3, #1
 800062c:	461a      	mov	r2, r3
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	4313      	orrs	r3, r2
 8000632:	60fb      	str	r3, [r7, #12]


	//6.  CPHA

	tempReg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	7a5b      	ldrb	r3, [r3, #9]
 8000638:	461a      	mov	r2, r3
 800063a:	68fb      	ldr	r3, [r7, #12]
 800063c:	4313      	orrs	r3, r2
 800063e:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempReg;
 8000640:	687b      	ldr	r3, [r7, #4]
 8000642:	681b      	ldr	r3, [r3, #0]
 8000644:	68fa      	ldr	r2, [r7, #12]
 8000646:	601a      	str	r2, [r3, #0]





}
 8000648:	bf00      	nop
 800064a:	3714      	adds	r7, #20
 800064c:	46bd      	mov	sp, r7
 800064e:	bc80      	pop	{r7}
 8000650:	4770      	bx	lr

08000652 <SPI_TransmitData>:
 * 																										 *
 * @Note			   -																				 *
 *********************************************************************************************************/

void SPI_TransmitData(SPI_RegDef_t *pSPIx, uint8_t *pTxBuffer, uint32_t Len)
{
 8000652:	b480      	push	{r7}
 8000654:	b085      	sub	sp, #20
 8000656:	af00      	add	r7, sp, #0
 8000658:	60f8      	str	r0, [r7, #12]
 800065a:	60b9      	str	r1, [r7, #8]
 800065c:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 800065e:	e026      	b.n	80006ae <SPI_TransmitData+0x5c>
	{
		while(!(pSPIx->SR & (1 << 1)));
 8000660:	bf00      	nop
 8000662:	68fb      	ldr	r3, [r7, #12]
 8000664:	689b      	ldr	r3, [r3, #8]
 8000666:	f003 0302 	and.w	r3, r3, #2
 800066a:	2b00      	cmp	r3, #0
 800066c:	d0f9      	beq.n	8000662 <SPI_TransmitData+0x10>
		if((pSPIx->CR1 & ( 1 << SPI_CR1_DFF)))
 800066e:	68fb      	ldr	r3, [r7, #12]
 8000670:	681b      	ldr	r3, [r3, #0]
 8000672:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8000676:	2b00      	cmp	r3, #0
 8000678:	d00e      	beq.n	8000698 <SPI_TransmitData+0x46>
		{
			pSPIx->DR = *((uint16_t*)pTxBuffer);
 800067a:	68bb      	ldr	r3, [r7, #8]
 800067c:	881b      	ldrh	r3, [r3, #0]
 800067e:	461a      	mov	r2, r3
 8000680:	68fb      	ldr	r3, [r7, #12]
 8000682:	60da      	str	r2, [r3, #12]
			Len--;
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	3b01      	subs	r3, #1
 8000688:	607b      	str	r3, [r7, #4]
			Len--;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	3b01      	subs	r3, #1
 800068e:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	3301      	adds	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
 8000696:	e00a      	b.n	80006ae <SPI_TransmitData+0x5c>
		}
		else
		{
			pSPIx->DR = *pTxBuffer;
 8000698:	68bb      	ldr	r3, [r7, #8]
 800069a:	781b      	ldrb	r3, [r3, #0]
 800069c:	461a      	mov	r2, r3
 800069e:	68fb      	ldr	r3, [r7, #12]
 80006a0:	60da      	str	r2, [r3, #12]
			Len--;
 80006a2:	687b      	ldr	r3, [r7, #4]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80006a8:	68bb      	ldr	r3, [r7, #8]
 80006aa:	3301      	adds	r3, #1
 80006ac:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	2b00      	cmp	r3, #0
 80006b2:	d1d5      	bne.n	8000660 <SPI_TransmitData+0xe>
		}
	}

}
 80006b4:	bf00      	nop
 80006b6:	3714      	adds	r7, #20
 80006b8:	46bd      	mov	sp, r7
 80006ba:	bc80      	pop	{r7}
 80006bc:	4770      	bx	lr

080006be <SPI_PeriphControl>:
 * @return			   -																				 *
 * 																										 *
 * @Note			   -																				 *
 *********************************************************************************************************/
void SPI_PeriphControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80006be:	b480      	push	{r7}
 80006c0:	b083      	sub	sp, #12
 80006c2:	af00      	add	r7, sp, #0
 80006c4:	6078      	str	r0, [r7, #4]
 80006c6:	460b      	mov	r3, r1
 80006c8:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 80006ca:	78fb      	ldrb	r3, [r7, #3]
 80006cc:	2b01      	cmp	r3, #1
 80006ce:	d106      	bne.n	80006de <SPI_PeriphControl+0x20>
	{
		pSPIx->CR1 |= (1 << SPI_CR1_SPE);
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80006d8:	687b      	ldr	r3, [r7, #4]
 80006da:	601a      	str	r2, [r3, #0]
	else
	{
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
	}

}
 80006dc:	e005      	b.n	80006ea <SPI_PeriphControl+0x2c>
		pSPIx->CR1 &= ~(1 << SPI_CR1_SPE);
 80006de:	687b      	ldr	r3, [r7, #4]
 80006e0:	681b      	ldr	r3, [r3, #0]
 80006e2:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	601a      	str	r2, [r3, #0]
}
 80006ea:	bf00      	nop
 80006ec:	370c      	adds	r7, #12
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bc80      	pop	{r7}
 80006f2:	4770      	bx	lr

080006f4 <SPI_SSOEConfig>:
 * 																										 *
 * @Note			   -																				 *
 *********************************************************************************************************/

void SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 80006f4:	b480      	push	{r7}
 80006f6:	b083      	sub	sp, #12
 80006f8:	af00      	add	r7, sp, #0
 80006fa:	6078      	str	r0, [r7, #4]
 80006fc:	460b      	mov	r3, r1
 80006fe:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000700:	78fb      	ldrb	r3, [r7, #3]
 8000702:	2b01      	cmp	r3, #1
 8000704:	d106      	bne.n	8000714 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |= (1 << SPI_CR2_SSOE);
 8000706:	687b      	ldr	r3, [r7, #4]
 8000708:	685b      	ldr	r3, [r3, #4]
 800070a:	f043 0204 	orr.w	r2, r3, #4
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
	}


}
 8000712:	e005      	b.n	8000720 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &= ~(1 << SPI_CR2_SSOE);
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	685b      	ldr	r3, [r3, #4]
 8000718:	f023 0204 	bic.w	r2, r3, #4
 800071c:	687b      	ldr	r3, [r7, #4]
 800071e:	605a      	str	r2, [r3, #4]
}
 8000720:	bf00      	nop
 8000722:	370c      	adds	r7, #12
 8000724:	46bd      	mov	sp, r7
 8000726:	bc80      	pop	{r7}
 8000728:	4770      	bx	lr
	...

0800072c <SPI_GPIOInits>:
#define HIGH 					1
#define BTN_PRESSED 			HIGH


void SPI_GPIOInits(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b084      	sub	sp, #16
 8000730:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;
	SPIPins.pGPIOx = GPIOB;
 8000732:	4b14      	ldr	r3, [pc, #80]	; (8000784 <SPI_GPIOInits+0x58>)
 8000734:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 8000736:	2302      	movs	r3, #2
 8000738:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 800073a:	2305      	movs	r3, #5
 800073c:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 800073e:	2300      	movs	r3, #0
 8000740:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 8000742:	2301      	movs	r3, #1
 8000744:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000746:	2302      	movs	r3, #2
 8000748:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 800074a:	230d      	movs	r3, #13
 800074c:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800074e:	1d3b      	adds	r3, r7, #4
 8000750:	4618      	mov	r0, r3
 8000752:	f7ff fe3d 	bl	80003d0 <GPIO_Init>

	//MOSI

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 8000756:	230f      	movs	r3, #15
 8000758:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 800075a:	1d3b      	adds	r3, r7, #4
 800075c:	4618      	mov	r0, r3
 800075e:	f7ff fe37 	bl	80003d0 <GPIO_Init>
	//MISO

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
 8000762:	230e      	movs	r3, #14
 8000764:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000766:	1d3b      	adds	r3, r7, #4
 8000768:	4618      	mov	r0, r3
 800076a:	f7ff fe31 	bl	80003d0 <GPIO_Init>
	//NSS

	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 800076e:	230c      	movs	r3, #12
 8000770:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 8000772:	1d3b      	adds	r3, r7, #4
 8000774:	4618      	mov	r0, r3
 8000776:	f7ff fe2b 	bl	80003d0 <GPIO_Init>

}
 800077a:	bf00      	nop
 800077c:	3710      	adds	r7, #16
 800077e:	46bd      	mov	sp, r7
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	40020400 	.word	0x40020400

08000788 <SPI2_Init>:
void SPI2_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b084      	sub	sp, #16
 800078c:	af00      	add	r7, sp, #0
	SPI_Handle_t SPI2H;
	SPI2H.pSPIx = SPI2;
 800078e:	4b0c      	ldr	r3, [pc, #48]	; (80007c0 <SPI2_Init+0x38>)
 8000790:	607b      	str	r3, [r7, #4]
	SPI2H.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 8000792:	2300      	movs	r3, #0
 8000794:	727b      	strb	r3, [r7, #9]
	SPI2H.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000796:	2301      	movs	r3, #1
 8000798:	723b      	strb	r3, [r7, #8]
	SPI2H.SPIConfig.SPI_CLKSpeed = SPI_CLK_SPEED_DIV8;
 800079a:	2302      	movs	r3, #2
 800079c:	72bb      	strb	r3, [r7, #10]
	SPI2H.SPIConfig.SPI_DFF = SPI_DFF_8Bits;
 800079e:	2300      	movs	r3, #0
 80007a0:	72fb      	strb	r3, [r7, #11]
	SPI2H.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 80007a2:	2300      	movs	r3, #0
 80007a4:	733b      	strb	r3, [r7, #12]
	SPI2H.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 80007a6:	2300      	movs	r3, #0
 80007a8:	737b      	strb	r3, [r7, #13]
	SPI2H.SPIConfig.SPI_SSM = SPI_SSM_DI;
 80007aa:	2300      	movs	r3, #0
 80007ac:	73bb      	strb	r3, [r7, #14]
	SPI_Init(&SPI2H);
 80007ae:	1d3b      	adds	r3, r7, #4
 80007b0:	4618      	mov	r0, r3
 80007b2:	f7ff feff 	bl	80005b4 <SPI_Init>

}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	40003800 	.word	0x40003800

080007c4 <BTN_Init>:

void BTN_Init()
{
 80007c4:	b580      	push	{r7, lr}
 80007c6:	b084      	sub	sp, #16
 80007c8:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioBtn;
	GpioBtn.pGPIOx = GPIOA;
 80007ca:	4b0b      	ldr	r3, [pc, #44]	; (80007f8 <BTN_Init+0x34>)
 80007cc:	607b      	str	r3, [r7, #4]
	GpioBtn.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_0;
 80007ce:	2300      	movs	r3, #0
 80007d0:	723b      	strb	r3, [r7, #8]
	GpioBtn.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_INPUT;
 80007d2:	2300      	movs	r3, #0
 80007d4:	727b      	strb	r3, [r7, #9]
	GpioBtn.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_SPEED_FAST;
 80007d6:	2302      	movs	r3, #2
 80007d8:	72bb      	strb	r3, [r7, #10]
	GpioBtn.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_PIN_PD;
 80007da:	2302      	movs	r3, #2
 80007dc:	72fb      	strb	r3, [r7, #11]

	GPIO_PCLK_Control(GPIOA, ENABLE);
 80007de:	2101      	movs	r1, #1
 80007e0:	4805      	ldr	r0, [pc, #20]	; (80007f8 <BTN_Init+0x34>)
 80007e2:	f7ff fd0b 	bl	80001fc <GPIO_PCLK_Control>

	GPIO_Init(&GpioBtn);
 80007e6:	1d3b      	adds	r3, r7, #4
 80007e8:	4618      	mov	r0, r3
 80007ea:	f7ff fdf1 	bl	80003d0 <GPIO_Init>
}
 80007ee:	bf00      	nop
 80007f0:	3710      	adds	r7, #16
 80007f2:	46bd      	mov	sp, r7
 80007f4:	bd80      	pop	{r7, pc}
 80007f6:	bf00      	nop
 80007f8:	40020000 	.word	0x40020000

080007fc <LED_Init>:
void LED_Init(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	b084      	sub	sp, #16
 8000800:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = GPIOG;
 8000802:	4b0c      	ldr	r3, [pc, #48]	; (8000834 <LED_Init+0x38>)
 8000804:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_13;
 8000806:	230d      	movs	r3, #13
 8000808:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_OUTPUT;
 800080a:	2301      	movs	r3, #1
 800080c:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_SPEED_FAST;
 800080e:	2302      	movs	r3, #2
 8000810:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OUT_TYPE_OD;
 8000812:	2301      	movs	r3, #1
 8000814:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_NO_PUPD;
 8000816:	2300      	movs	r3, #0
 8000818:	72fb      	strb	r3, [r7, #11]

	GPIO_PCLK_Control(GPIOG, ENABLE);
 800081a:	2101      	movs	r1, #1
 800081c:	4805      	ldr	r0, [pc, #20]	; (8000834 <LED_Init+0x38>)
 800081e:	f7ff fced 	bl	80001fc <GPIO_PCLK_Control>

	GPIO_Init(&GpioLed);
 8000822:	1d3b      	adds	r3, r7, #4
 8000824:	4618      	mov	r0, r3
 8000826:	f7ff fdd3 	bl	80003d0 <GPIO_Init>
}
 800082a:	bf00      	nop
 800082c:	3710      	adds	r7, #16
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40021800 	.word	0x40021800

08000838 <delay>:
void delay(void)
{
 8000838:	b480      	push	{r7}
 800083a:	b083      	sub	sp, #12
 800083c:	af00      	add	r7, sp, #0
	for(uint32_t i = 0; i < 500000; i++);
 800083e:	2300      	movs	r3, #0
 8000840:	607b      	str	r3, [r7, #4]
 8000842:	e002      	b.n	800084a <delay+0x12>
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	3301      	adds	r3, #1
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	4a03      	ldr	r2, [pc, #12]	; (800085c <delay+0x24>)
 800084e:	4293      	cmp	r3, r2
 8000850:	d9f8      	bls.n	8000844 <delay+0xc>
}
 8000852:	bf00      	nop
 8000854:	370c      	adds	r7, #12
 8000856:	46bd      	mov	sp, r7
 8000858:	bc80      	pop	{r7}
 800085a:	4770      	bx	lr
 800085c:	0007a11f 	.word	0x0007a11f

08000860 <main>:
int main(void)
{
 8000860:	b590      	push	{r4, r7, lr}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
	char *data = "Hello";
 8000866:	4b1b      	ldr	r3, [pc, #108]	; (80008d4 <main+0x74>)
 8000868:	603b      	str	r3, [r7, #0]
	SPI_GPIOInits();
 800086a:	f7ff ff5f 	bl	800072c <SPI_GPIOInits>
	SPI2_Init();
 800086e:	f7ff ff8b 	bl	8000788 <SPI2_Init>
	SPI_SSOEConfig(SPI2, ENABLE);
 8000872:	2101      	movs	r1, #1
 8000874:	4818      	ldr	r0, [pc, #96]	; (80008d8 <main+0x78>)
 8000876:	f7ff ff3d 	bl	80006f4 <SPI_SSOEConfig>

	BTN_Init();
 800087a:	f7ff ffa3 	bl	80007c4 <BTN_Init>
	LED_Init();
 800087e:	f7ff ffbd 	bl	80007fc <LED_Init>

	while(1)
	{
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 8000882:	2100      	movs	r1, #0
 8000884:	4815      	ldr	r0, [pc, #84]	; (80008dc <main+0x7c>)
 8000886:	f7ff fe6c 	bl	8000562 <GPIO_ReadFromInputPin>
 800088a:	4603      	mov	r3, r0
 800088c:	2b01      	cmp	r3, #1
 800088e:	d1f8      	bne.n	8000882 <main+0x22>
		{
			delay();
 8000890:	f7ff ffd2 	bl	8000838 <delay>
			SPI_PeriphControl(SPI2, ENABLE);
 8000894:	2101      	movs	r1, #1
 8000896:	4810      	ldr	r0, [pc, #64]	; (80008d8 <main+0x78>)
 8000898:	f7ff ff11 	bl	80006be <SPI_PeriphControl>
			uint8_t DataLen = strlen(data);
 800089c:	683b      	ldr	r3, [r7, #0]
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fca4 	bl	80001ec <strlen>
 80008a4:	4603      	mov	r3, r0
 80008a6:	71fb      	strb	r3, [r7, #7]
			SPI_TransmitData(SPI2, &data, 1);
 80008a8:	463b      	mov	r3, r7
 80008aa:	2201      	movs	r2, #1
 80008ac:	4619      	mov	r1, r3
 80008ae:	480a      	ldr	r0, [pc, #40]	; (80008d8 <main+0x78>)
 80008b0:	f7ff fecf 	bl	8000652 <SPI_TransmitData>
			GPIO_ToggleOutputPin(GPIOG, GPIO_PIN_NO_13);
 80008b4:	210d      	movs	r1, #13
 80008b6:	480a      	ldr	r0, [pc, #40]	; (80008e0 <main+0x80>)
 80008b8:	f7ff fe68 	bl	800058c <GPIO_ToggleOutputPin>
			SPI_TransmitData(SPI2, (uint8_t*)data, strlen(data));
 80008bc:	683c      	ldr	r4, [r7, #0]
 80008be:	683b      	ldr	r3, [r7, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fc93 	bl	80001ec <strlen>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4621      	mov	r1, r4
 80008cc:	4802      	ldr	r0, [pc, #8]	; (80008d8 <main+0x78>)
 80008ce:	f7ff fec0 	bl	8000652 <SPI_TransmitData>
		if(GPIO_ReadFromInputPin(GPIOA, GPIO_PIN_NO_0) == BTN_PRESSED)
 80008d2:	e7d6      	b.n	8000882 <main+0x22>
 80008d4:	08000998 	.word	0x08000998
 80008d8:	40003800 	.word	0x40003800
 80008dc:	40020000 	.word	0x40020000
 80008e0:	40021800 	.word	0x40021800

080008e4 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 80008e4:	480d      	ldr	r0, [pc, #52]	; (800091c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 80008e6:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <LoopForever+0x6>)
  ldr r1, =_edata
 80008ea:	490e      	ldr	r1, [pc, #56]	; (8000924 <LoopForever+0xa>)
  ldr r2, =_sidata
 80008ec:	4a0e      	ldr	r2, [pc, #56]	; (8000928 <LoopForever+0xe>)
  movs r3, #0
 80008ee:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80008f0:	e002      	b.n	80008f8 <LoopCopyDataInit>

080008f2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80008f2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80008f4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80008f6:	3304      	adds	r3, #4

080008f8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80008f8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80008fa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80008fc:	d3f9      	bcc.n	80008f2 <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80008fe:	4a0b      	ldr	r2, [pc, #44]	; (800092c <LoopForever+0x12>)
  ldr r4, =_ebss
 8000900:	4c0b      	ldr	r4, [pc, #44]	; (8000930 <LoopForever+0x16>)
  movs r3, #0
 8000902:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000904:	e001      	b.n	800090a <LoopFillZerobss>

08000906 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000906:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000908:	3204      	adds	r2, #4

0800090a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800090a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800090c:	d3fb      	bcc.n	8000906 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 800090e:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000912:	f000 f811 	bl	8000938 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000916:	f7ff ffa3 	bl	8000860 <main>

0800091a <LoopForever>:

LoopForever:
    b LoopForever
 800091a:	e7fe      	b.n	800091a <LoopForever>
  ldr   r0, =_estack
 800091c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000920:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000924:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000928:	080009a8 	.word	0x080009a8
  ldr r2, =_sbss
 800092c:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000930:	2000001c 	.word	0x2000001c

08000934 <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000934:	e7fe      	b.n	8000934 <ADC_IRQHandler>
	...

08000938 <__libc_init_array>:
 8000938:	b570      	push	{r4, r5, r6, lr}
 800093a:	4e0d      	ldr	r6, [pc, #52]	; (8000970 <__libc_init_array+0x38>)
 800093c:	4c0d      	ldr	r4, [pc, #52]	; (8000974 <__libc_init_array+0x3c>)
 800093e:	1ba4      	subs	r4, r4, r6
 8000940:	10a4      	asrs	r4, r4, #2
 8000942:	2500      	movs	r5, #0
 8000944:	42a5      	cmp	r5, r4
 8000946:	d109      	bne.n	800095c <__libc_init_array+0x24>
 8000948:	4e0b      	ldr	r6, [pc, #44]	; (8000978 <__libc_init_array+0x40>)
 800094a:	4c0c      	ldr	r4, [pc, #48]	; (800097c <__libc_init_array+0x44>)
 800094c:	f000 f818 	bl	8000980 <_init>
 8000950:	1ba4      	subs	r4, r4, r6
 8000952:	10a4      	asrs	r4, r4, #2
 8000954:	2500      	movs	r5, #0
 8000956:	42a5      	cmp	r5, r4
 8000958:	d105      	bne.n	8000966 <__libc_init_array+0x2e>
 800095a:	bd70      	pop	{r4, r5, r6, pc}
 800095c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000960:	4798      	blx	r3
 8000962:	3501      	adds	r5, #1
 8000964:	e7ee      	b.n	8000944 <__libc_init_array+0xc>
 8000966:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800096a:	4798      	blx	r3
 800096c:	3501      	adds	r5, #1
 800096e:	e7f2      	b.n	8000956 <__libc_init_array+0x1e>
 8000970:	080009a0 	.word	0x080009a0
 8000974:	080009a0 	.word	0x080009a0
 8000978:	080009a0 	.word	0x080009a0
 800097c:	080009a4 	.word	0x080009a4

08000980 <_init>:
 8000980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000982:	bf00      	nop
 8000984:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000986:	bc08      	pop	{r3}
 8000988:	469e      	mov	lr, r3
 800098a:	4770      	bx	lr

0800098c <_fini>:
 800098c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800098e:	bf00      	nop
 8000990:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000992:	bc08      	pop	{r3}
 8000994:	469e      	mov	lr, r3
 8000996:	4770      	bx	lr

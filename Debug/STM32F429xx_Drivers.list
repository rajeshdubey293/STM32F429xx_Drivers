
STM32F429xx_Drivers.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00000a54  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000008  08000c00  08000c00  00010c00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08000c08  08000c08  00010c10  2**0
                  CONTENTS
  4 .ARM          00000000  08000c08  08000c08  00010c10  2**0
                  CONTENTS
  5 .preinit_array 00000000  08000c08  08000c10  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08000c08  08000c08  00010c08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08000c0c  08000c0c  00010c0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000000  20000000  20000000  00010c10  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000001c  20000000  08000c10  00020000  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000001c  08000c10  0002001c  2**0
                  ALLOC
 11 .ARM.attributes 0000002a  00000000  00000000  00010c10  2**0
                  CONTENTS, READONLY
 12 .debug_info   00001bab  00000000  00000000  00010c3a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000050e  00000000  00000000  000127e5  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000198  00000000  00000000  00012cf8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000160  00000000  00000000  00012e90  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00000f03  00000000  00000000  00012ff0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000132b  00000000  00000000  00013ef3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    00009ac3  00000000  00000000  0001521e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0001ece1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000005f0  00000000  00000000  0001ed5c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000000 	.word	0x20000000
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08000be8 	.word	0x08000be8

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000004 	.word	0x20000004
 80001e8:	08000be8 	.word	0x08000be8

080001ec <strlen>:
 80001ec:	4603      	mov	r3, r0
 80001ee:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f2:	2a00      	cmp	r2, #0
 80001f4:	d1fb      	bne.n	80001ee <strlen+0x2>
 80001f6:	1a18      	subs	r0, r3, r0
 80001f8:	3801      	subs	r0, #1
 80001fa:	4770      	bx	lr

080001fc <GPIO_PCLK_Control>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

void GPIO_PCLK_Control(GPIO_RegDef_t *pGPIOx, uint8_t EnorDi)
{
 80001fc:	b480      	push	{r7}
 80001fe:	b083      	sub	sp, #12
 8000200:	af00      	add	r7, sp, #0
 8000202:	6078      	str	r0, [r7, #4]
 8000204:	460b      	mov	r3, r1
 8000206:	70fb      	strb	r3, [r7, #3]
	if(EnorDi == ENABLE)
 8000208:	78fb      	ldrb	r3, [r7, #3]
 800020a:	2b01      	cmp	r3, #1
 800020c:	d162      	bne.n	80002d4 <GPIO_PCLK_Control+0xd8>
	{
		if(pGPIOx == GPIOA)
 800020e:	687b      	ldr	r3, [r7, #4]
 8000210:	4a65      	ldr	r2, [pc, #404]	; (80003a8 <GPIO_PCLK_Control+0x1ac>)
 8000212:	4293      	cmp	r3, r2
 8000214:	d106      	bne.n	8000224 <GPIO_PCLK_Control+0x28>
			GPIOA_PCLK_EN();
 8000216:	4b65      	ldr	r3, [pc, #404]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000218:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800021a:	4a64      	ldr	r2, [pc, #400]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800021c:	f043 0301 	orr.w	r3, r3, #1
 8000220:	6313      	str	r3, [r2, #48]	; 0x30
		else if(pGPIOx == GPIOH)
			GPIOH_PCLK_DI();
		else if(pGPIOx == GPIOI)
				GPIOI_PCLK_DI();
	}
}
 8000222:	e0bc      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOB)
 8000224:	687b      	ldr	r3, [r7, #4]
 8000226:	4a62      	ldr	r2, [pc, #392]	; (80003b0 <GPIO_PCLK_Control+0x1b4>)
 8000228:	4293      	cmp	r3, r2
 800022a:	d106      	bne.n	800023a <GPIO_PCLK_Control+0x3e>
			GPIOB_PCLK_EN();
 800022c:	4b5f      	ldr	r3, [pc, #380]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800022e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000230:	4a5e      	ldr	r2, [pc, #376]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000232:	f043 0302 	orr.w	r3, r3, #2
 8000236:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000238:	e0b1      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOC)
 800023a:	687b      	ldr	r3, [r7, #4]
 800023c:	4a5d      	ldr	r2, [pc, #372]	; (80003b4 <GPIO_PCLK_Control+0x1b8>)
 800023e:	4293      	cmp	r3, r2
 8000240:	d106      	bne.n	8000250 <GPIO_PCLK_Control+0x54>
			GPIOC_PCLK_EN();
 8000242:	4b5a      	ldr	r3, [pc, #360]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000246:	4a59      	ldr	r2, [pc, #356]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000248:	f043 0304 	orr.w	r3, r3, #4
 800024c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800024e:	e0a6      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOD)
 8000250:	687b      	ldr	r3, [r7, #4]
 8000252:	4a59      	ldr	r2, [pc, #356]	; (80003b8 <GPIO_PCLK_Control+0x1bc>)
 8000254:	4293      	cmp	r3, r2
 8000256:	d106      	bne.n	8000266 <GPIO_PCLK_Control+0x6a>
			GPIOD_PCLK_EN();
 8000258:	4b54      	ldr	r3, [pc, #336]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800025a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800025c:	4a53      	ldr	r2, [pc, #332]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800025e:	f043 0308 	orr.w	r3, r3, #8
 8000262:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000264:	e09b      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOE)
 8000266:	687b      	ldr	r3, [r7, #4]
 8000268:	4a54      	ldr	r2, [pc, #336]	; (80003bc <GPIO_PCLK_Control+0x1c0>)
 800026a:	4293      	cmp	r3, r2
 800026c:	d106      	bne.n	800027c <GPIO_PCLK_Control+0x80>
			GPIOE_PCLK_EN();
 800026e:	4b4f      	ldr	r3, [pc, #316]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000272:	4a4e      	ldr	r2, [pc, #312]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000274:	f043 0310 	orr.w	r3, r3, #16
 8000278:	6313      	str	r3, [r2, #48]	; 0x30
}
 800027a:	e090      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOF)
 800027c:	687b      	ldr	r3, [r7, #4]
 800027e:	4a50      	ldr	r2, [pc, #320]	; (80003c0 <GPIO_PCLK_Control+0x1c4>)
 8000280:	4293      	cmp	r3, r2
 8000282:	d106      	bne.n	8000292 <GPIO_PCLK_Control+0x96>
			GPIOF_PCLK_EN();
 8000284:	4b49      	ldr	r3, [pc, #292]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000286:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000288:	4a48      	ldr	r2, [pc, #288]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800028a:	f043 0320 	orr.w	r3, r3, #32
 800028e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000290:	e085      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOG)
 8000292:	687b      	ldr	r3, [r7, #4]
 8000294:	4a4b      	ldr	r2, [pc, #300]	; (80003c4 <GPIO_PCLK_Control+0x1c8>)
 8000296:	4293      	cmp	r3, r2
 8000298:	d106      	bne.n	80002a8 <GPIO_PCLK_Control+0xac>
			GPIOG_PCLK_EN();
 800029a:	4b44      	ldr	r3, [pc, #272]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800029c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800029e:	4a43      	ldr	r2, [pc, #268]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002a0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80002a4:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002a6:	e07a      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOH)
 80002a8:	687b      	ldr	r3, [r7, #4]
 80002aa:	4a47      	ldr	r2, [pc, #284]	; (80003c8 <GPIO_PCLK_Control+0x1cc>)
 80002ac:	4293      	cmp	r3, r2
 80002ae:	d106      	bne.n	80002be <GPIO_PCLK_Control+0xc2>
			GPIOH_PCLK_EN();
 80002b0:	4b3e      	ldr	r3, [pc, #248]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002b4:	4a3d      	ldr	r2, [pc, #244]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002b6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80002ba:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002bc:	e06f      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOI)
 80002be:	687b      	ldr	r3, [r7, #4]
 80002c0:	4a42      	ldr	r2, [pc, #264]	; (80003cc <GPIO_PCLK_Control+0x1d0>)
 80002c2:	4293      	cmp	r3, r2
 80002c4:	d16b      	bne.n	800039e <GPIO_PCLK_Control+0x1a2>
			GPIOI_PCLK_EN();
 80002c6:	4b39      	ldr	r3, [pc, #228]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002ca:	4a38      	ldr	r2, [pc, #224]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80002d0:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002d2:	e064      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
	else if(EnorDi == DISABLE)
 80002d4:	78fb      	ldrb	r3, [r7, #3]
 80002d6:	2b00      	cmp	r3, #0
 80002d8:	d161      	bne.n	800039e <GPIO_PCLK_Control+0x1a2>
		if(pGPIOx == GPIOA)
 80002da:	687b      	ldr	r3, [r7, #4]
 80002dc:	4a32      	ldr	r2, [pc, #200]	; (80003a8 <GPIO_PCLK_Control+0x1ac>)
 80002de:	4293      	cmp	r3, r2
 80002e0:	d106      	bne.n	80002f0 <GPIO_PCLK_Control+0xf4>
			GPIOA_PCLK_DI();
 80002e2:	4b32      	ldr	r3, [pc, #200]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002e6:	4a31      	ldr	r2, [pc, #196]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002e8:	f023 0301 	bic.w	r3, r3, #1
 80002ec:	6313      	str	r3, [r2, #48]	; 0x30
}
 80002ee:	e056      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOB)
 80002f0:	687b      	ldr	r3, [r7, #4]
 80002f2:	4a2f      	ldr	r2, [pc, #188]	; (80003b0 <GPIO_PCLK_Control+0x1b4>)
 80002f4:	4293      	cmp	r3, r2
 80002f6:	d106      	bne.n	8000306 <GPIO_PCLK_Control+0x10a>
			GPIOB_PCLK_DI();
 80002f8:	4b2c      	ldr	r3, [pc, #176]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80002fc:	4a2b      	ldr	r2, [pc, #172]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 80002fe:	f023 0302 	bic.w	r3, r3, #2
 8000302:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000304:	e04b      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOC)
 8000306:	687b      	ldr	r3, [r7, #4]
 8000308:	4a2a      	ldr	r2, [pc, #168]	; (80003b4 <GPIO_PCLK_Control+0x1b8>)
 800030a:	4293      	cmp	r3, r2
 800030c:	d106      	bne.n	800031c <GPIO_PCLK_Control+0x120>
			GPIOC_PCLK_DI();
 800030e:	4b27      	ldr	r3, [pc, #156]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000310:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000312:	4a26      	ldr	r2, [pc, #152]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000314:	f023 0304 	bic.w	r3, r3, #4
 8000318:	6313      	str	r3, [r2, #48]	; 0x30
}
 800031a:	e040      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOD)
 800031c:	687b      	ldr	r3, [r7, #4]
 800031e:	4a26      	ldr	r2, [pc, #152]	; (80003b8 <GPIO_PCLK_Control+0x1bc>)
 8000320:	4293      	cmp	r3, r2
 8000322:	d106      	bne.n	8000332 <GPIO_PCLK_Control+0x136>
			GPIOD_PCLK_DI();
 8000324:	4b21      	ldr	r3, [pc, #132]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000328:	4a20      	ldr	r2, [pc, #128]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800032a:	f023 0308 	bic.w	r3, r3, #8
 800032e:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000330:	e035      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOE)
 8000332:	687b      	ldr	r3, [r7, #4]
 8000334:	4a21      	ldr	r2, [pc, #132]	; (80003bc <GPIO_PCLK_Control+0x1c0>)
 8000336:	4293      	cmp	r3, r2
 8000338:	d106      	bne.n	8000348 <GPIO_PCLK_Control+0x14c>
			GPIOE_PCLK_DI();
 800033a:	4b1c      	ldr	r3, [pc, #112]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800033c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800033e:	4a1b      	ldr	r2, [pc, #108]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000340:	f023 0310 	bic.w	r3, r3, #16
 8000344:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000346:	e02a      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOF)
 8000348:	687b      	ldr	r3, [r7, #4]
 800034a:	4a1d      	ldr	r2, [pc, #116]	; (80003c0 <GPIO_PCLK_Control+0x1c4>)
 800034c:	4293      	cmp	r3, r2
 800034e:	d106      	bne.n	800035e <GPIO_PCLK_Control+0x162>
			GPIOF_PCLK_DI();
 8000350:	4b16      	ldr	r3, [pc, #88]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000354:	4a15      	ldr	r2, [pc, #84]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000356:	f023 0320 	bic.w	r3, r3, #32
 800035a:	6313      	str	r3, [r2, #48]	; 0x30
}
 800035c:	e01f      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOG)
 800035e:	687b      	ldr	r3, [r7, #4]
 8000360:	4a18      	ldr	r2, [pc, #96]	; (80003c4 <GPIO_PCLK_Control+0x1c8>)
 8000362:	4293      	cmp	r3, r2
 8000364:	d106      	bne.n	8000374 <GPIO_PCLK_Control+0x178>
			GPIOG_PCLK_DI();
 8000366:	4b11      	ldr	r3, [pc, #68]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000368:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800036a:	4a10      	ldr	r2, [pc, #64]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800036c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8000370:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000372:	e014      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOH)
 8000374:	687b      	ldr	r3, [r7, #4]
 8000376:	4a14      	ldr	r2, [pc, #80]	; (80003c8 <GPIO_PCLK_Control+0x1cc>)
 8000378:	4293      	cmp	r3, r2
 800037a:	d106      	bne.n	800038a <GPIO_PCLK_Control+0x18e>
			GPIOH_PCLK_DI();
 800037c:	4b0b      	ldr	r3, [pc, #44]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 800037e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000380:	4a0a      	ldr	r2, [pc, #40]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000382:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8000386:	6313      	str	r3, [r2, #48]	; 0x30
}
 8000388:	e009      	b.n	800039e <GPIO_PCLK_Control+0x1a2>
		else if(pGPIOx == GPIOI)
 800038a:	687b      	ldr	r3, [r7, #4]
 800038c:	4a0f      	ldr	r2, [pc, #60]	; (80003cc <GPIO_PCLK_Control+0x1d0>)
 800038e:	4293      	cmp	r3, r2
 8000390:	d105      	bne.n	800039e <GPIO_PCLK_Control+0x1a2>
				GPIOI_PCLK_DI();
 8000392:	4b06      	ldr	r3, [pc, #24]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000394:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000396:	4a05      	ldr	r2, [pc, #20]	; (80003ac <GPIO_PCLK_Control+0x1b0>)
 8000398:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800039c:	6313      	str	r3, [r2, #48]	; 0x30
}
 800039e:	bf00      	nop
 80003a0:	370c      	adds	r7, #12
 80003a2:	46bd      	mov	sp, r7
 80003a4:	bc80      	pop	{r7}
 80003a6:	4770      	bx	lr
 80003a8:	40020000 	.word	0x40020000
 80003ac:	40023800 	.word	0x40023800
 80003b0:	40020400 	.word	0x40020400
 80003b4:	40020800 	.word	0x40020800
 80003b8:	40020c00 	.word	0x40020c00
 80003bc:	40021000 	.word	0x40021000
 80003c0:	40021400 	.word	0x40021400
 80003c4:	40021800 	.word	0x40021800
 80003c8:	40021c00 	.word	0x40021c00
 80003cc:	40022000 	.word	0x40022000

080003d0 <GPIO_Init>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

void GPIO_Init(GPIO_Handle_t *pGPIOHandle)
{
 80003d0:	b480      	push	{r7}
 80003d2:	b087      	sub	sp, #28
 80003d4:	af00      	add	r7, sp, #0
 80003d6:	6078      	str	r0, [r7, #4]
	//1. GPIO Mode configuration

	uint32_t temp = 0;
 80003d8:	2300      	movs	r3, #0
 80003da:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode <= GPIO_MODE_ANALOG)
 80003dc:	687b      	ldr	r3, [r7, #4]
 80003de:	795b      	ldrb	r3, [r3, #5]
 80003e0:	2b03      	cmp	r3, #3
 80003e2:	d81f      	bhi.n	8000424 <GPIO_Init+0x54>
	{
		//non interrupt mode
		temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode << ( 2 *pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80003e4:	687b      	ldr	r3, [r7, #4]
 80003e6:	795b      	ldrb	r3, [r3, #5]
 80003e8:	461a      	mov	r2, r3
 80003ea:	687b      	ldr	r3, [r7, #4]
 80003ec:	791b      	ldrb	r3, [r3, #4]
 80003ee:	005b      	lsls	r3, r3, #1
 80003f0:	fa02 f303 	lsl.w	r3, r2, r3
 80003f4:	617b      	str	r3, [r7, #20]
		pGPIOHandle->pGPIOx->MODER &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80003f6:	687b      	ldr	r3, [r7, #4]
 80003f8:	681b      	ldr	r3, [r3, #0]
 80003fa:	681a      	ldr	r2, [r3, #0]
 80003fc:	687b      	ldr	r3, [r7, #4]
 80003fe:	791b      	ldrb	r3, [r3, #4]
 8000400:	4619      	mov	r1, r3
 8000402:	2303      	movs	r3, #3
 8000404:	408b      	lsls	r3, r1
 8000406:	43db      	mvns	r3, r3
 8000408:	4619      	mov	r1, r3
 800040a:	687b      	ldr	r3, [r7, #4]
 800040c:	681b      	ldr	r3, [r3, #0]
 800040e:	400a      	ands	r2, r1
 8000410:	601a      	str	r2, [r3, #0]
		pGPIOHandle->pGPIOx->MODER |= temp;
 8000412:	687b      	ldr	r3, [r7, #4]
 8000414:	681b      	ldr	r3, [r3, #0]
 8000416:	6819      	ldr	r1, [r3, #0]
 8000418:	687b      	ldr	r3, [r7, #4]
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	697a      	ldr	r2, [r7, #20]
 800041e:	430a      	orrs	r2, r1
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	e0ca      	b.n	80005ba <GPIO_Init+0x1ea>
	}
	else
	{
		if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_FT )
 8000424:	687b      	ldr	r3, [r7, #4]
 8000426:	795b      	ldrb	r3, [r3, #5]
 8000428:	2b04      	cmp	r3, #4
 800042a:	d117      	bne.n	800045c <GPIO_Init+0x8c>
		{
			//1. configure the FTSR
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800042c:	4b4a      	ldr	r3, [pc, #296]	; (8000558 <GPIO_Init+0x188>)
 800042e:	68db      	ldr	r3, [r3, #12]
 8000430:	687a      	ldr	r2, [r7, #4]
 8000432:	7912      	ldrb	r2, [r2, #4]
 8000434:	4611      	mov	r1, r2
 8000436:	2201      	movs	r2, #1
 8000438:	408a      	lsls	r2, r1
 800043a:	4611      	mov	r1, r2
 800043c:	4a46      	ldr	r2, [pc, #280]	; (8000558 <GPIO_Init+0x188>)
 800043e:	430b      	orrs	r3, r1
 8000440:	60d3      	str	r3, [r2, #12]
			//Clear the corresponding RTSR bit
			EXTI->RTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000442:	4b45      	ldr	r3, [pc, #276]	; (8000558 <GPIO_Init+0x188>)
 8000444:	689b      	ldr	r3, [r3, #8]
 8000446:	687a      	ldr	r2, [r7, #4]
 8000448:	7912      	ldrb	r2, [r2, #4]
 800044a:	4611      	mov	r1, r2
 800044c:	2201      	movs	r2, #1
 800044e:	408a      	lsls	r2, r1
 8000450:	43d2      	mvns	r2, r2
 8000452:	4611      	mov	r1, r2
 8000454:	4a40      	ldr	r2, [pc, #256]	; (8000558 <GPIO_Init+0x188>)
 8000456:	400b      	ands	r3, r1
 8000458:	6093      	str	r3, [r2, #8]
 800045a:	e035      	b.n	80004c8 <GPIO_Init+0xf8>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode ==GPIO_MODE_IN_RT )
 800045c:	687b      	ldr	r3, [r7, #4]
 800045e:	795b      	ldrb	r3, [r3, #5]
 8000460:	2b05      	cmp	r3, #5
 8000462:	d117      	bne.n	8000494 <GPIO_Init+0xc4>
		{
			//1 . configure the RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000464:	4b3c      	ldr	r3, [pc, #240]	; (8000558 <GPIO_Init+0x188>)
 8000466:	689b      	ldr	r3, [r3, #8]
 8000468:	687a      	ldr	r2, [r7, #4]
 800046a:	7912      	ldrb	r2, [r2, #4]
 800046c:	4611      	mov	r1, r2
 800046e:	2201      	movs	r2, #1
 8000470:	408a      	lsls	r2, r1
 8000472:	4611      	mov	r1, r2
 8000474:	4a38      	ldr	r2, [pc, #224]	; (8000558 <GPIO_Init+0x188>)
 8000476:	430b      	orrs	r3, r1
 8000478:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR &= ~( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800047a:	4b37      	ldr	r3, [pc, #220]	; (8000558 <GPIO_Init+0x188>)
 800047c:	68db      	ldr	r3, [r3, #12]
 800047e:	687a      	ldr	r2, [r7, #4]
 8000480:	7912      	ldrb	r2, [r2, #4]
 8000482:	4611      	mov	r1, r2
 8000484:	2201      	movs	r2, #1
 8000486:	408a      	lsls	r2, r1
 8000488:	43d2      	mvns	r2, r2
 800048a:	4611      	mov	r1, r2
 800048c:	4a32      	ldr	r2, [pc, #200]	; (8000558 <GPIO_Init+0x188>)
 800048e:	400b      	ands	r3, r1
 8000490:	60d3      	str	r3, [r2, #12]
 8000492:	e019      	b.n	80004c8 <GPIO_Init+0xf8>

		}
		else if (pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_IN_RFT )
 8000494:	687b      	ldr	r3, [r7, #4]
 8000496:	795b      	ldrb	r3, [r3, #5]
 8000498:	2b06      	cmp	r3, #6
 800049a:	d115      	bne.n	80004c8 <GPIO_Init+0xf8>
		{
			//1. configure both FTSR and RTSR
			EXTI->RTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 800049c:	4b2e      	ldr	r3, [pc, #184]	; (8000558 <GPIO_Init+0x188>)
 800049e:	689b      	ldr	r3, [r3, #8]
 80004a0:	687a      	ldr	r2, [r7, #4]
 80004a2:	7912      	ldrb	r2, [r2, #4]
 80004a4:	4611      	mov	r1, r2
 80004a6:	2201      	movs	r2, #1
 80004a8:	408a      	lsls	r2, r1
 80004aa:	4611      	mov	r1, r2
 80004ac:	4a2a      	ldr	r2, [pc, #168]	; (8000558 <GPIO_Init+0x188>)
 80004ae:	430b      	orrs	r3, r1
 80004b0:	6093      	str	r3, [r2, #8]
			//Clear the corresponding RTSR bit
			EXTI->FTSR |= ( 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80004b2:	4b29      	ldr	r3, [pc, #164]	; (8000558 <GPIO_Init+0x188>)
 80004b4:	68db      	ldr	r3, [r3, #12]
 80004b6:	687a      	ldr	r2, [r7, #4]
 80004b8:	7912      	ldrb	r2, [r2, #4]
 80004ba:	4611      	mov	r1, r2
 80004bc:	2201      	movs	r2, #1
 80004be:	408a      	lsls	r2, r1
 80004c0:	4611      	mov	r1, r2
 80004c2:	4a25      	ldr	r2, [pc, #148]	; (8000558 <GPIO_Init+0x188>)
 80004c4:	430b      	orrs	r3, r1
 80004c6:	60d3      	str	r3, [r2, #12]
		}

	//2. configure the GPIO port selection in SYSCFG_EXTICR
	uint8_t temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 4 ;
 80004c8:	687b      	ldr	r3, [r7, #4]
 80004ca:	791b      	ldrb	r3, [r3, #4]
 80004cc:	089b      	lsrs	r3, r3, #2
 80004ce:	74fb      	strb	r3, [r7, #19]
	uint8_t temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 4;
 80004d0:	687b      	ldr	r3, [r7, #4]
 80004d2:	791b      	ldrb	r3, [r3, #4]
 80004d4:	f003 0303 	and.w	r3, r3, #3
 80004d8:	74bb      	strb	r3, [r7, #18]
	uint8_t portcode = GPIO_BASEADDR_TO_CODE(pGPIOHandle->pGPIOx);
 80004da:	687b      	ldr	r3, [r7, #4]
 80004dc:	681b      	ldr	r3, [r3, #0]
 80004de:	4a1f      	ldr	r2, [pc, #124]	; (800055c <GPIO_Init+0x18c>)
 80004e0:	4293      	cmp	r3, r2
 80004e2:	d04d      	beq.n	8000580 <GPIO_Init+0x1b0>
 80004e4:	687b      	ldr	r3, [r7, #4]
 80004e6:	681b      	ldr	r3, [r3, #0]
 80004e8:	4a1d      	ldr	r2, [pc, #116]	; (8000560 <GPIO_Init+0x190>)
 80004ea:	4293      	cmp	r3, r2
 80004ec:	d032      	beq.n	8000554 <GPIO_Init+0x184>
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	681b      	ldr	r3, [r3, #0]
 80004f2:	4a1c      	ldr	r2, [pc, #112]	; (8000564 <GPIO_Init+0x194>)
 80004f4:	4293      	cmp	r3, r2
 80004f6:	d02b      	beq.n	8000550 <GPIO_Init+0x180>
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	681b      	ldr	r3, [r3, #0]
 80004fc:	4a1a      	ldr	r2, [pc, #104]	; (8000568 <GPIO_Init+0x198>)
 80004fe:	4293      	cmp	r3, r2
 8000500:	d024      	beq.n	800054c <GPIO_Init+0x17c>
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	681b      	ldr	r3, [r3, #0]
 8000506:	4a19      	ldr	r2, [pc, #100]	; (800056c <GPIO_Init+0x19c>)
 8000508:	4293      	cmp	r3, r2
 800050a:	d01d      	beq.n	8000548 <GPIO_Init+0x178>
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	681b      	ldr	r3, [r3, #0]
 8000510:	4a17      	ldr	r2, [pc, #92]	; (8000570 <GPIO_Init+0x1a0>)
 8000512:	4293      	cmp	r3, r2
 8000514:	d016      	beq.n	8000544 <GPIO_Init+0x174>
 8000516:	687b      	ldr	r3, [r7, #4]
 8000518:	681b      	ldr	r3, [r3, #0]
 800051a:	4a16      	ldr	r2, [pc, #88]	; (8000574 <GPIO_Init+0x1a4>)
 800051c:	4293      	cmp	r3, r2
 800051e:	d00f      	beq.n	8000540 <GPIO_Init+0x170>
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	681b      	ldr	r3, [r3, #0]
 8000524:	4a14      	ldr	r2, [pc, #80]	; (8000578 <GPIO_Init+0x1a8>)
 8000526:	4293      	cmp	r3, r2
 8000528:	d008      	beq.n	800053c <GPIO_Init+0x16c>
 800052a:	687b      	ldr	r3, [r7, #4]
 800052c:	681b      	ldr	r3, [r3, #0]
 800052e:	4a13      	ldr	r2, [pc, #76]	; (800057c <GPIO_Init+0x1ac>)
 8000530:	4293      	cmp	r3, r2
 8000532:	d101      	bne.n	8000538 <GPIO_Init+0x168>
 8000534:	2308      	movs	r3, #8
 8000536:	e024      	b.n	8000582 <GPIO_Init+0x1b2>
 8000538:	2300      	movs	r3, #0
 800053a:	e022      	b.n	8000582 <GPIO_Init+0x1b2>
 800053c:	2307      	movs	r3, #7
 800053e:	e020      	b.n	8000582 <GPIO_Init+0x1b2>
 8000540:	2306      	movs	r3, #6
 8000542:	e01e      	b.n	8000582 <GPIO_Init+0x1b2>
 8000544:	2305      	movs	r3, #5
 8000546:	e01c      	b.n	8000582 <GPIO_Init+0x1b2>
 8000548:	2304      	movs	r3, #4
 800054a:	e01a      	b.n	8000582 <GPIO_Init+0x1b2>
 800054c:	2303      	movs	r3, #3
 800054e:	e018      	b.n	8000582 <GPIO_Init+0x1b2>
 8000550:	2302      	movs	r3, #2
 8000552:	e016      	b.n	8000582 <GPIO_Init+0x1b2>
 8000554:	2301      	movs	r3, #1
 8000556:	e014      	b.n	8000582 <GPIO_Init+0x1b2>
 8000558:	40013c00 	.word	0x40013c00
 800055c:	40020000 	.word	0x40020000
 8000560:	40020400 	.word	0x40020400
 8000564:	40020800 	.word	0x40020800
 8000568:	40020c00 	.word	0x40020c00
 800056c:	40021000 	.word	0x40021000
 8000570:	40021400 	.word	0x40021400
 8000574:	40021800 	.word	0x40021800
 8000578:	40021c00 	.word	0x40021c00
 800057c:	40022000 	.word	0x40022000
 8000580:	2300      	movs	r3, #0
 8000582:	747b      	strb	r3, [r7, #17]
	SYSCFG_PCLK_EN();
 8000584:	4b5d      	ldr	r3, [pc, #372]	; (80006fc <GPIO_Init+0x32c>)
 8000586:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000588:	4a5c      	ldr	r2, [pc, #368]	; (80006fc <GPIO_Init+0x32c>)
 800058a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058e:	6453      	str	r3, [r2, #68]	; 0x44
	SYSCFG->EXTICR[temp1] = portcode << ( temp2 * 4);
 8000590:	7c7a      	ldrb	r2, [r7, #17]
 8000592:	7cbb      	ldrb	r3, [r7, #18]
 8000594:	009b      	lsls	r3, r3, #2
 8000596:	fa02 f103 	lsl.w	r1, r2, r3
 800059a:	4a59      	ldr	r2, [pc, #356]	; (8000700 <GPIO_Init+0x330>)
 800059c:	7cfb      	ldrb	r3, [r7, #19]
 800059e:	3302      	adds	r3, #2
 80005a0:	f842 1023 	str.w	r1, [r2, r3, lsl #2]

	//3 . enable the exti interrupt delivery using IMR
	EXTI->IMR |= 1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber;
 80005a4:	4b57      	ldr	r3, [pc, #348]	; (8000704 <GPIO_Init+0x334>)
 80005a6:	681b      	ldr	r3, [r3, #0]
 80005a8:	687a      	ldr	r2, [r7, #4]
 80005aa:	7912      	ldrb	r2, [r2, #4]
 80005ac:	4611      	mov	r1, r2
 80005ae:	2201      	movs	r2, #1
 80005b0:	408a      	lsls	r2, r1
 80005b2:	4611      	mov	r1, r2
 80005b4:	4a53      	ldr	r2, [pc, #332]	; (8000704 <GPIO_Init+0x334>)
 80005b6:	430b      	orrs	r3, r1
 80005b8:	6013      	str	r3, [r2, #0]
	}

	//2 . GPIO Speed Configuration

	temp = 0;
 80005ba:	2300      	movs	r3, #0
 80005bc:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinSpeed << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	799b      	ldrb	r3, [r3, #6]
 80005c2:	461a      	mov	r2, r3
 80005c4:	687b      	ldr	r3, [r7, #4]
 80005c6:	791b      	ldrb	r3, [r3, #4]
 80005c8:	005b      	lsls	r3, r3, #1
 80005ca:	fa02 f303 	lsl.w	r3, r2, r3
 80005ce:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OSPEEDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 80005d0:	687b      	ldr	r3, [r7, #4]
 80005d2:	681b      	ldr	r3, [r3, #0]
 80005d4:	689a      	ldr	r2, [r3, #8]
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	791b      	ldrb	r3, [r3, #4]
 80005da:	4619      	mov	r1, r3
 80005dc:	2303      	movs	r3, #3
 80005de:	408b      	lsls	r3, r1
 80005e0:	43db      	mvns	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	687b      	ldr	r3, [r7, #4]
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	400a      	ands	r2, r1
 80005ea:	609a      	str	r2, [r3, #8]
	pGPIOHandle->pGPIOx->OSPEEDR |= temp;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	681b      	ldr	r3, [r3, #0]
 80005f0:	6899      	ldr	r1, [r3, #8]
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	681b      	ldr	r3, [r3, #0]
 80005f6:	697a      	ldr	r2, [r7, #20]
 80005f8:	430a      	orrs	r2, r1
 80005fa:	609a      	str	r2, [r3, #8]



	//3. GPIO PullUp and PullDown configuration

	temp = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinPuPdControl << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	79db      	ldrb	r3, [r3, #7]
 8000604:	461a      	mov	r2, r3
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	791b      	ldrb	r3, [r3, #4]
 800060a:	005b      	lsls	r3, r3, #1
 800060c:	fa02 f303 	lsl.w	r3, r2, r3
 8000610:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->PUPDR &= ~( 0x3 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	681b      	ldr	r3, [r3, #0]
 8000616:	68da      	ldr	r2, [r3, #12]
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	791b      	ldrb	r3, [r3, #4]
 800061c:	4619      	mov	r1, r3
 800061e:	2303      	movs	r3, #3
 8000620:	408b      	lsls	r3, r1
 8000622:	43db      	mvns	r3, r3
 8000624:	4619      	mov	r1, r3
 8000626:	687b      	ldr	r3, [r7, #4]
 8000628:	681b      	ldr	r3, [r3, #0]
 800062a:	400a      	ands	r2, r1
 800062c:	60da      	str	r2, [r3, #12]
	pGPIOHandle->pGPIOx->PUPDR |= temp;
 800062e:	687b      	ldr	r3, [r7, #4]
 8000630:	681b      	ldr	r3, [r3, #0]
 8000632:	68d9      	ldr	r1, [r3, #12]
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	681b      	ldr	r3, [r3, #0]
 8000638:	697a      	ldr	r2, [r7, #20]
 800063a:	430a      	orrs	r2, r1
 800063c:	60da      	str	r2, [r3, #12]

	//4. GPIO Output Type configuration

	temp = 0;
 800063e:	2300      	movs	r3, #0
 8000640:	617b      	str	r3, [r7, #20]
	temp = (pGPIOHandle->GPIO_PinConfig.GPIO_PinOPType << ( 2 * pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber));
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	7a1b      	ldrb	r3, [r3, #8]
 8000646:	461a      	mov	r2, r3
 8000648:	687b      	ldr	r3, [r7, #4]
 800064a:	791b      	ldrb	r3, [r3, #4]
 800064c:	005b      	lsls	r3, r3, #1
 800064e:	fa02 f303 	lsl.w	r3, r2, r3
 8000652:	617b      	str	r3, [r7, #20]
	pGPIOHandle->pGPIOx->OTYPER &= ~( 0x1 << pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	681b      	ldr	r3, [r3, #0]
 8000658:	685a      	ldr	r2, [r3, #4]
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	791b      	ldrb	r3, [r3, #4]
 800065e:	4619      	mov	r1, r3
 8000660:	2301      	movs	r3, #1
 8000662:	408b      	lsls	r3, r1
 8000664:	43db      	mvns	r3, r3
 8000666:	4619      	mov	r1, r3
 8000668:	687b      	ldr	r3, [r7, #4]
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	400a      	ands	r2, r1
 800066e:	605a      	str	r2, [r3, #4]
	pGPIOHandle->pGPIOx->OTYPER |= temp;
 8000670:	687b      	ldr	r3, [r7, #4]
 8000672:	681b      	ldr	r3, [r3, #0]
 8000674:	6859      	ldr	r1, [r3, #4]
 8000676:	687b      	ldr	r3, [r7, #4]
 8000678:	681b      	ldr	r3, [r3, #0]
 800067a:	697a      	ldr	r2, [r7, #20]
 800067c:	430a      	orrs	r2, r1
 800067e:	605a      	str	r2, [r3, #4]

	//5. GPIO Alternate function configuration

	temp = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	617b      	str	r3, [r7, #20]
	if(pGPIOHandle->GPIO_PinConfig.GPIO_PinMode == GPIO_MODE_ALTFN)
 8000684:	687b      	ldr	r3, [r7, #4]
 8000686:	795b      	ldrb	r3, [r3, #5]
 8000688:	2b02      	cmp	r3, #2
 800068a:	d131      	bne.n	80006f0 <GPIO_Init+0x320>
	{
		uint8_t temp1, temp2;
		temp1 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber / 8;
 800068c:	687b      	ldr	r3, [r7, #4]
 800068e:	791b      	ldrb	r3, [r3, #4]
 8000690:	08db      	lsrs	r3, r3, #3
 8000692:	743b      	strb	r3, [r7, #16]
		temp2 = pGPIOHandle->GPIO_PinConfig.GPIO_PinNumber % 8;
 8000694:	687b      	ldr	r3, [r7, #4]
 8000696:	791b      	ldrb	r3, [r3, #4]
 8000698:	f003 0307 	and.w	r3, r3, #7
 800069c:	73fb      	strb	r3, [r7, #15]
		pGPIOHandle->pGPIOx->AFR[temp1] &= ~(0xF << (4 * temp2 ));
 800069e:	687b      	ldr	r3, [r7, #4]
 80006a0:	681b      	ldr	r3, [r3, #0]
 80006a2:	7c3a      	ldrb	r2, [r7, #16]
 80006a4:	3208      	adds	r2, #8
 80006a6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006aa:	7bfb      	ldrb	r3, [r7, #15]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	220f      	movs	r2, #15
 80006b0:	fa02 f303 	lsl.w	r3, r2, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	4618      	mov	r0, r3
 80006b8:	687b      	ldr	r3, [r7, #4]
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	7c3a      	ldrb	r2, [r7, #16]
 80006be:	4001      	ands	r1, r0
 80006c0:	3208      	adds	r2, #8
 80006c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
		pGPIOHandle->pGPIOx->AFR[temp1] |= (pGPIOHandle->GPIO_PinConfig.GPIO_PinAltFunMode << (4 * temp2 ));
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	681b      	ldr	r3, [r3, #0]
 80006ca:	7c3a      	ldrb	r2, [r7, #16]
 80006cc:	3208      	adds	r2, #8
 80006ce:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80006d2:	687b      	ldr	r3, [r7, #4]
 80006d4:	7a5b      	ldrb	r3, [r3, #9]
 80006d6:	461a      	mov	r2, r3
 80006d8:	7bfb      	ldrb	r3, [r7, #15]
 80006da:	009b      	lsls	r3, r3, #2
 80006dc:	fa02 f303 	lsl.w	r3, r2, r3
 80006e0:	4618      	mov	r0, r3
 80006e2:	687b      	ldr	r3, [r7, #4]
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	7c3a      	ldrb	r2, [r7, #16]
 80006e8:	4301      	orrs	r1, r0
 80006ea:	3208      	adds	r2, #8
 80006ec:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
	}
}
 80006f0:	bf00      	nop
 80006f2:	371c      	adds	r7, #28
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bc80      	pop	{r7}
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	40023800 	.word	0x40023800
 8000700:	40013800 	.word	0x40013800
 8000704:	40013c00 	.word	0x40013c00

08000708 <GPIO_ReadFromInputPin>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

uint8_t GPIO_ReadFromInputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000708:	b480      	push	{r7}
 800070a:	b085      	sub	sp, #20
 800070c:	af00      	add	r7, sp, #0
 800070e:	6078      	str	r0, [r7, #4]
 8000710:	460b      	mov	r3, r1
 8000712:	70fb      	strb	r3, [r7, #3]
	uint8_t value;
	value = (uint8_t)((pGPIOx->IDR >> PinNumber ) & 0x00000001 );
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	691a      	ldr	r2, [r3, #16]
 8000718:	78fb      	ldrb	r3, [r7, #3]
 800071a:	fa22 f303 	lsr.w	r3, r2, r3
 800071e:	b2db      	uxtb	r3, r3
 8000720:	f003 0301 	and.w	r3, r3, #1
 8000724:	73fb      	strb	r3, [r7, #15]
	return value;
 8000726:	7bfb      	ldrb	r3, [r7, #15]

}
 8000728:	4618      	mov	r0, r3
 800072a:	3714      	adds	r7, #20
 800072c:	46bd      	mov	sp, r7
 800072e:	bc80      	pop	{r7}
 8000730:	4770      	bx	lr

08000732 <GPIO_ToggleOutputPin>:
 * 																									*
 * @Note			   -																			*
 ***************************************************************************************************/

void GPIO_ToggleOutputPin(GPIO_RegDef_t *pGPIOx, uint8_t PinNumber)
{
 8000732:	b480      	push	{r7}
 8000734:	b083      	sub	sp, #12
 8000736:	af00      	add	r7, sp, #0
 8000738:	6078      	str	r0, [r7, #4]
 800073a:	460b      	mov	r3, r1
 800073c:	70fb      	strb	r3, [r7, #3]
	pGPIOx->ODR ^= ( 1 << PinNumber);
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	695b      	ldr	r3, [r3, #20]
 8000742:	78fa      	ldrb	r2, [r7, #3]
 8000744:	2101      	movs	r1, #1
 8000746:	fa01 f202 	lsl.w	r2, r1, r2
 800074a:	405a      	eors	r2, r3
 800074c:	687b      	ldr	r3, [r7, #4]
 800074e:	615a      	str	r2, [r3, #20]
}
 8000750:	bf00      	nop
 8000752:	370c      	adds	r7, #12
 8000754:	46bd      	mov	sp, r7
 8000756:	bc80      	pop	{r7}
 8000758:	4770      	bx	lr
	...

0800075c <SPI_PeriClockControl>:
 *
 * @Note              -

 */
void SPI_PeriClockControl(SPI_RegDef_t *pSPIx, uint8_t EnorDi)
{
 800075c:	b480      	push	{r7}
 800075e:	b083      	sub	sp, #12
 8000760:	af00      	add	r7, sp, #0
 8000762:	6078      	str	r0, [r7, #4]
 8000764:	460b      	mov	r3, r1
 8000766:	70fb      	strb	r3, [r7, #3]

	if(EnorDi == ENABLE)
 8000768:	78fb      	ldrb	r3, [r7, #3]
 800076a:	2b01      	cmp	r3, #1
 800076c:	d11f      	bne.n	80007ae <SPI_PeriClockControl+0x52>
	{
		if(pSPIx == SPI1)
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	4a11      	ldr	r2, [pc, #68]	; (80007b8 <SPI_PeriClockControl+0x5c>)
 8000772:	4293      	cmp	r3, r2
 8000774:	d106      	bne.n	8000784 <SPI_PeriClockControl+0x28>
		{
			SPI1_PCLK_EN();
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <SPI_PeriClockControl+0x60>)
 8000778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800077a:	4a10      	ldr	r2, [pc, #64]	; (80007bc <SPI_PeriClockControl+0x60>)
 800077c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8000780:	6453      	str	r3, [r2, #68]	; 0x44
	}
	else
	{
		//TODO
	}
}
 8000782:	e014      	b.n	80007ae <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI2)
 8000784:	687b      	ldr	r3, [r7, #4]
 8000786:	4a0e      	ldr	r2, [pc, #56]	; (80007c0 <SPI_PeriClockControl+0x64>)
 8000788:	4293      	cmp	r3, r2
 800078a:	d106      	bne.n	800079a <SPI_PeriClockControl+0x3e>
			SPI2_PCLK_EN();
 800078c:	4b0b      	ldr	r3, [pc, #44]	; (80007bc <SPI_PeriClockControl+0x60>)
 800078e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000790:	4a0a      	ldr	r2, [pc, #40]	; (80007bc <SPI_PeriClockControl+0x60>)
 8000792:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000796:	6453      	str	r3, [r2, #68]	; 0x44
}
 8000798:	e009      	b.n	80007ae <SPI_PeriClockControl+0x52>
		}else if (pSPIx == SPI3)
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	4a09      	ldr	r2, [pc, #36]	; (80007c4 <SPI_PeriClockControl+0x68>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d105      	bne.n	80007ae <SPI_PeriClockControl+0x52>
			SPI3_PCLK_EN();
 80007a2:	4b06      	ldr	r3, [pc, #24]	; (80007bc <SPI_PeriClockControl+0x60>)
 80007a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007a6:	4a05      	ldr	r2, [pc, #20]	; (80007bc <SPI_PeriClockControl+0x60>)
 80007a8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ac:	6453      	str	r3, [r2, #68]	; 0x44
}
 80007ae:	bf00      	nop
 80007b0:	370c      	adds	r7, #12
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bc80      	pop	{r7}
 80007b6:	4770      	bx	lr
 80007b8:	40013000 	.word	0x40013000
 80007bc:	40023800 	.word	0x40023800
 80007c0:	40003800 	.word	0x40003800
 80007c4:	40003c00 	.word	0x40003c00

080007c8 <SPI_Init>:
 *
 * @Note              -

 */
void SPI_Init(SPI_Handle_t *pSPIHandle)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b084      	sub	sp, #16
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]

	//peripheral clock enable

	SPI_PeriClockControl(pSPIHandle->pSPIx, ENABLE);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	2101      	movs	r1, #1
 80007d6:	4618      	mov	r0, r3
 80007d8:	f7ff ffc0 	bl	800075c <SPI_PeriClockControl>

	//first lets configure the SPI_CR1 register

	uint32_t tempreg = 0;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]

	//1. configure the device mode
	tempreg |= pSPIHandle->SPIConfig.SPI_DeviceMode << SPI_CR1_MSTR ;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	791b      	ldrb	r3, [r3, #4]
 80007e4:	009b      	lsls	r3, r3, #2
 80007e6:	461a      	mov	r2, r3
 80007e8:	68fb      	ldr	r3, [r7, #12]
 80007ea:	4313      	orrs	r3, r2
 80007ec:	60fb      	str	r3, [r7, #12]

	//2. Configure the bus config
	if(pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_FD)
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	795b      	ldrb	r3, [r3, #5]
 80007f2:	2b01      	cmp	r3, #1
 80007f4:	d104      	bne.n	8000800 <SPI_Init+0x38>
	{
		//bidi mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 80007f6:	68fb      	ldr	r3, [r7, #12]
 80007f8:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80007fc:	60fb      	str	r3, [r7, #12]
 80007fe:	e014      	b.n	800082a <SPI_Init+0x62>

	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_HD)
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	795b      	ldrb	r3, [r3, #5]
 8000804:	2b02      	cmp	r3, #2
 8000806:	d104      	bne.n	8000812 <SPI_Init+0x4a>
	{
		//bidi mode should be set
		tempreg |= ( 1 << SPI_CR1_BIDIMODE);
 8000808:	68fb      	ldr	r3, [r7, #12]
 800080a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800080e:	60fb      	str	r3, [r7, #12]
 8000810:	e00b      	b.n	800082a <SPI_Init+0x62>
	}else if (pSPIHandle->SPIConfig.SPI_BusConfig == SPI_BUS_CONFIG_SIMPLEX_RXONLY)
 8000812:	687b      	ldr	r3, [r7, #4]
 8000814:	795b      	ldrb	r3, [r3, #5]
 8000816:	2b03      	cmp	r3, #3
 8000818:	d107      	bne.n	800082a <SPI_Init+0x62>
	{
		//BIDI mode should be cleared
		tempreg &= ~( 1 << SPI_CR1_BIDIMODE);
 800081a:	68fb      	ldr	r3, [r7, #12]
 800081c:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8000820:	60fb      	str	r3, [r7, #12]
		//RXONLY bit must be set
		tempreg |= ( 1 << SPI_CR1_RXONLY);
 8000822:	68fb      	ldr	r3, [r7, #12]
 8000824:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000828:	60fb      	str	r3, [r7, #12]
	}

	// 3. Configure the spi serial clock speed (baud rate)
	tempreg |= pSPIHandle->SPIConfig.SPI_SclkSpeed << SPI_CR1_BR;
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	799b      	ldrb	r3, [r3, #6]
 800082e:	00db      	lsls	r3, r3, #3
 8000830:	461a      	mov	r2, r3
 8000832:	68fb      	ldr	r3, [r7, #12]
 8000834:	4313      	orrs	r3, r2
 8000836:	60fb      	str	r3, [r7, #12]

	//4.  Configure the DFF
	tempreg |= pSPIHandle->SPIConfig.SPI_DFF << SPI_CR1_DFF;
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	79db      	ldrb	r3, [r3, #7]
 800083c:	02db      	lsls	r3, r3, #11
 800083e:	461a      	mov	r2, r3
 8000840:	68fb      	ldr	r3, [r7, #12]
 8000842:	4313      	orrs	r3, r2
 8000844:	60fb      	str	r3, [r7, #12]

	//5. configure the CPOL
	tempreg |= pSPIHandle->SPIConfig.SPI_CPOL << SPI_CR1_CPOL;
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7a1b      	ldrb	r3, [r3, #8]
 800084a:	005b      	lsls	r3, r3, #1
 800084c:	461a      	mov	r2, r3
 800084e:	68fb      	ldr	r3, [r7, #12]
 8000850:	4313      	orrs	r3, r2
 8000852:	60fb      	str	r3, [r7, #12]

	//6 . configure the CPHA
	tempreg |= pSPIHandle->SPIConfig.SPI_CPHA << SPI_CR1_CPHA;
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7a5b      	ldrb	r3, [r3, #9]
 8000858:	461a      	mov	r2, r3
 800085a:	68fb      	ldr	r3, [r7, #12]
 800085c:	4313      	orrs	r3, r2
 800085e:	60fb      	str	r3, [r7, #12]

	tempreg |= pSPIHandle->SPIConfig.SPI_SSM << SPI_CR1_SSM;
 8000860:	687b      	ldr	r3, [r7, #4]
 8000862:	7a9b      	ldrb	r3, [r3, #10]
 8000864:	025b      	lsls	r3, r3, #9
 8000866:	461a      	mov	r2, r3
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	4313      	orrs	r3, r2
 800086c:	60fb      	str	r3, [r7, #12]

	pSPIHandle->pSPIx->CR1 = tempreg;
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	68fa      	ldr	r2, [r7, #12]
 8000874:	601a      	str	r2, [r3, #0]

}
 8000876:	bf00      	nop
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <SPI_GetFlagStatus>:
{
 //todo
}

uint8_t SPI_GetFlagStatus(SPI_RegDef_t *pSPIx , uint32_t FlagName)
{
 800087e:	b480      	push	{r7}
 8000880:	b083      	sub	sp, #12
 8000882:	af00      	add	r7, sp, #0
 8000884:	6078      	str	r0, [r7, #4]
 8000886:	6039      	str	r1, [r7, #0]
	if(pSPIx->SR & FlagName)
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	689a      	ldr	r2, [r3, #8]
 800088c:	683b      	ldr	r3, [r7, #0]
 800088e:	4013      	ands	r3, r2
 8000890:	2b00      	cmp	r3, #0
 8000892:	d001      	beq.n	8000898 <SPI_GetFlagStatus+0x1a>
	{
		return FLAG_SET;
 8000894:	2301      	movs	r3, #1
 8000896:	e000      	b.n	800089a <SPI_GetFlagStatus+0x1c>
	}
	return FLAG_RESET;
 8000898:	2300      	movs	r3, #0
}
 800089a:	4618      	mov	r0, r3
 800089c:	370c      	adds	r7, #12
 800089e:	46bd      	mov	sp, r7
 80008a0:	bc80      	pop	{r7}
 80008a2:	4770      	bx	lr

080008a4 <SPI_SendData>:
 *
 * @Note              - This is blocking call

 */
void SPI_SendData(SPI_RegDef_t *pSPIx,uint8_t *pTxBuffer, uint32_t Len)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b084      	sub	sp, #16
 80008a8:	af00      	add	r7, sp, #0
 80008aa:	60f8      	str	r0, [r7, #12]
 80008ac:	60b9      	str	r1, [r7, #8]
 80008ae:	607a      	str	r2, [r7, #4]
	while(Len > 0)
 80008b0:	e027      	b.n	8000902 <SPI_SendData+0x5e>
	{
		//1. wait until TXE is set
		while(SPI_GetFlagStatus(pSPIx,SPI_TXE_FLAG)  == FLAG_RESET );
 80008b2:	bf00      	nop
 80008b4:	2102      	movs	r1, #2
 80008b6:	68f8      	ldr	r0, [r7, #12]
 80008b8:	f7ff ffe1 	bl	800087e <SPI_GetFlagStatus>
 80008bc:	4603      	mov	r3, r0
 80008be:	2b00      	cmp	r3, #0
 80008c0:	d0f8      	beq.n	80008b4 <SPI_SendData+0x10>

		//2. check the DFF bit in CR1
		if( (pSPIx->CR1 & ( 1 << SPI_CR1_DFF) ) )
 80008c2:	68fb      	ldr	r3, [r7, #12]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d00e      	beq.n	80008ec <SPI_SendData+0x48>
		{
			//16 bit DFF
			//1. load the data in to the DR
			pSPIx->DR =   *((uint16_t*)pTxBuffer);
 80008ce:	68bb      	ldr	r3, [r7, #8]
 80008d0:	881b      	ldrh	r3, [r3, #0]
 80008d2:	461a      	mov	r2, r3
 80008d4:	68fb      	ldr	r3, [r7, #12]
 80008d6:	60da      	str	r2, [r3, #12]
			Len--;
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	3b01      	subs	r3, #1
 80008dc:	607b      	str	r3, [r7, #4]
			Len--;
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	3b01      	subs	r3, #1
 80008e2:	607b      	str	r3, [r7, #4]
			(uint16_t*)pTxBuffer++;
 80008e4:	68bb      	ldr	r3, [r7, #8]
 80008e6:	3301      	adds	r3, #1
 80008e8:	60bb      	str	r3, [r7, #8]
 80008ea:	e00a      	b.n	8000902 <SPI_SendData+0x5e>
		}else
		{
			//8 bit DFF
			pSPIx->DR =   *pTxBuffer;
 80008ec:	68bb      	ldr	r3, [r7, #8]
 80008ee:	781b      	ldrb	r3, [r3, #0]
 80008f0:	461a      	mov	r2, r3
 80008f2:	68fb      	ldr	r3, [r7, #12]
 80008f4:	60da      	str	r2, [r3, #12]
			Len--;
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	3b01      	subs	r3, #1
 80008fa:	607b      	str	r3, [r7, #4]
			pTxBuffer++;
 80008fc:	68bb      	ldr	r3, [r7, #8]
 80008fe:	3301      	adds	r3, #1
 8000900:	60bb      	str	r3, [r7, #8]
	while(Len > 0)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	2b00      	cmp	r3, #0
 8000906:	d1d4      	bne.n	80008b2 <SPI_SendData+0xe>
		}
	}

}
 8000908:	bf00      	nop
 800090a:	3710      	adds	r7, #16
 800090c:	46bd      	mov	sp, r7
 800090e:	bd80      	pop	{r7, pc}

08000910 <SPI_PeripheralControl>:
 *
 * @Note              -

 */
void SPI_PeripheralControl(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000910:	b480      	push	{r7}
 8000912:	b083      	sub	sp, #12
 8000914:	af00      	add	r7, sp, #0
 8000916:	6078      	str	r0, [r7, #4]
 8000918:	460b      	mov	r3, r1
 800091a:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 800091c:	78fb      	ldrb	r3, [r7, #3]
 800091e:	2b01      	cmp	r3, #1
 8000920:	d106      	bne.n	8000930 <SPI_PeripheralControl+0x20>
	{
		pSPIx->CR1 |=  (1 << SPI_CR1_SPE);
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	601a      	str	r2, [r3, #0]
	{
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
	}


}
 800092e:	e005      	b.n	800093c <SPI_PeripheralControl+0x2c>
		pSPIx->CR1 &=  ~(1 << SPI_CR1_SPE);
 8000930:	687b      	ldr	r3, [r7, #4]
 8000932:	681b      	ldr	r3, [r3, #0]
 8000934:	f023 0240 	bic.w	r2, r3, #64	; 0x40
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	601a      	str	r2, [r3, #0]
}
 800093c:	bf00      	nop
 800093e:	370c      	adds	r7, #12
 8000940:	46bd      	mov	sp, r7
 8000942:	bc80      	pop	{r7}
 8000944:	4770      	bx	lr

08000946 <SPI_SSOEConfig>:
 *
 * @Note              -

 */
void  SPI_SSOEConfig(SPI_RegDef_t *pSPIx, uint8_t EnOrDi)
{
 8000946:	b480      	push	{r7}
 8000948:	b083      	sub	sp, #12
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
 800094e:	460b      	mov	r3, r1
 8000950:	70fb      	strb	r3, [r7, #3]
	if(EnOrDi == ENABLE)
 8000952:	78fb      	ldrb	r3, [r7, #3]
 8000954:	2b01      	cmp	r3, #1
 8000956:	d106      	bne.n	8000966 <SPI_SSOEConfig+0x20>
	{
		pSPIx->CR2 |=  (1 << SPI_CR2_SSOE);
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	685b      	ldr	r3, [r3, #4]
 800095c:	f043 0204 	orr.w	r2, r3, #4
 8000960:	687b      	ldr	r3, [r7, #4]
 8000962:	605a      	str	r2, [r3, #4]
	{
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
	}


}
 8000964:	e005      	b.n	8000972 <SPI_SSOEConfig+0x2c>
		pSPIx->CR2 &=  ~(1 << SPI_CR2_SSOE);
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	685b      	ldr	r3, [r3, #4]
 800096a:	f023 0204 	bic.w	r2, r3, #4
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	605a      	str	r2, [r3, #4]
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	bc80      	pop	{r7}
 800097a:	4770      	bx	lr

0800097c <delay>:
#include<string.h>
#include"main.h"


void delay(void)
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
	for(uint32_t i = 0 ; i < 500000/2 ; i ++);
 8000982:	2300      	movs	r3, #0
 8000984:	607b      	str	r3, [r7, #4]
 8000986:	e002      	b.n	800098e <delay+0x12>
 8000988:	687b      	ldr	r3, [r7, #4]
 800098a:	3301      	adds	r3, #1
 800098c:	607b      	str	r3, [r7, #4]
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	4a03      	ldr	r2, [pc, #12]	; (80009a0 <delay+0x24>)
 8000992:	4293      	cmp	r3, r2
 8000994:	d9f8      	bls.n	8000988 <delay+0xc>
}
 8000996:	bf00      	nop
 8000998:	370c      	adds	r7, #12
 800099a:	46bd      	mov	sp, r7
 800099c:	bc80      	pop	{r7}
 800099e:	4770      	bx	lr
 80009a0:	0003d08f 	.word	0x0003d08f

080009a4 <SPI2_GPIOInits>:
 * PB12 --> SPI2_NSS
 * ALT function mode : 5
 */

void SPI2_GPIOInits(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af00      	add	r7, sp, #0
	GPIO_Handle_t SPIPins;

	SPIPins.pGPIOx = GPIOB;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <SPI2_GPIOInits+0x4c>)
 80009ac:	607b      	str	r3, [r7, #4]
	SPIPins.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_ALTFN;
 80009ae:	2302      	movs	r3, #2
 80009b0:	727b      	strb	r3, [r7, #9]
	SPIPins.GPIO_PinConfig.GPIO_PinAltFunMode = 5;
 80009b2:	2305      	movs	r3, #5
 80009b4:	737b      	strb	r3, [r7, #13]
	SPIPins.GPIO_PinConfig.GPIO_PinOPType = GPIO_OUT_TYPE_PP;
 80009b6:	2300      	movs	r3, #0
 80009b8:	733b      	strb	r3, [r7, #12]
	SPIPins.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_PIN_PU;
 80009ba:	2301      	movs	r3, #1
 80009bc:	72fb      	strb	r3, [r7, #11]
	SPIPins.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 80009be:	2302      	movs	r3, #2
 80009c0:	72bb      	strb	r3, [r7, #10]

	//SCLK
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_13;
 80009c2:	230d      	movs	r3, #13
 80009c4:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	4618      	mov	r0, r3
 80009ca:	f7ff fd01 	bl	80003d0 <GPIO_Init>

	//MOSI
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_15;
 80009ce:	230f      	movs	r3, #15
 80009d0:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009d2:	1d3b      	adds	r3, r7, #4
 80009d4:	4618      	mov	r0, r3
 80009d6:	f7ff fcfb 	bl	80003d0 <GPIO_Init>
	//SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_14;
	//GPIO_Init(&SPIPins);


	//NSS
	SPIPins.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_12;
 80009da:	230c      	movs	r3, #12
 80009dc:	723b      	strb	r3, [r7, #8]
	GPIO_Init(&SPIPins);
 80009de:	1d3b      	adds	r3, r7, #4
 80009e0:	4618      	mov	r0, r3
 80009e2:	f7ff fcf5 	bl	80003d0 <GPIO_Init>


}
 80009e6:	bf00      	nop
 80009e8:	3710      	adds	r7, #16
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	40020400 	.word	0x40020400

080009f4 <SPI2_Inits>:

void SPI2_Inits(void)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b088      	sub	sp, #32
 80009f8:	af00      	add	r7, sp, #0

	SPI_Handle_t SPI2handle;

	SPI2handle.pSPIx = SPI2;
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <SPI2_Inits+0x38>)
 80009fc:	603b      	str	r3, [r7, #0]
	SPI2handle.SPIConfig.SPI_BusConfig = SPI_BUS_CONFIG_FD;
 80009fe:	2301      	movs	r3, #1
 8000a00:	717b      	strb	r3, [r7, #5]
	SPI2handle.SPIConfig.SPI_DeviceMode = SPI_DEVICE_MODE_MASTER;
 8000a02:	2301      	movs	r3, #1
 8000a04:	713b      	strb	r3, [r7, #4]
	SPI2handle.SPIConfig.SPI_SclkSpeed = SPI_SCLK_SPEED_DIV16;//generates sclk of 2MHz
 8000a06:	2303      	movs	r3, #3
 8000a08:	71bb      	strb	r3, [r7, #6]
	SPI2handle.SPIConfig.SPI_DFF = SPI_DFF_8BITS;
 8000a0a:	2300      	movs	r3, #0
 8000a0c:	71fb      	strb	r3, [r7, #7]
	SPI2handle.SPIConfig.SPI_CPOL = SPI_CPOL_LOW;
 8000a0e:	2300      	movs	r3, #0
 8000a10:	723b      	strb	r3, [r7, #8]
	SPI2handle.SPIConfig.SPI_CPHA = SPI_CPHA_LOW;
 8000a12:	2300      	movs	r3, #0
 8000a14:	727b      	strb	r3, [r7, #9]
	SPI2handle.SPIConfig.SPI_SSM = SPI_SSM_DI; //Hardware slave management enabled for NSS pin
 8000a16:	2300      	movs	r3, #0
 8000a18:	72bb      	strb	r3, [r7, #10]

	SPI_Init(&SPI2handle);
 8000a1a:	463b      	mov	r3, r7
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f7ff fed3 	bl	80007c8 <SPI_Init>
}
 8000a22:	bf00      	nop
 8000a24:	3720      	adds	r7, #32
 8000a26:	46bd      	mov	sp, r7
 8000a28:	bd80      	pop	{r7, pc}
 8000a2a:	bf00      	nop
 8000a2c:	40003800 	.word	0x40003800

08000a30 <GPIO_ButtonInit>:

void GPIO_ButtonInit(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
	GPIO_Handle_t GPIOBtn;

	//this is btn gpio configuration
	GPIOBtn.pGPIOx = GPIOA;
 8000a36:	4b09      	ldr	r3, [pc, #36]	; (8000a5c <GPIO_ButtonInit+0x2c>)
 8000a38:	607b      	str	r3, [r7, #4]
	GPIOBtn.GPIO_PinConfig.GPIO_PinNumber = GPIO_PIN_NO_0;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	723b      	strb	r3, [r7, #8]
	GPIOBtn.GPIO_PinConfig.GPIO_PinMode = GPIO_MODE_INPUT;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	727b      	strb	r3, [r7, #9]
	GPIOBtn.GPIO_PinConfig.GPIO_PinSpeed = GPIO_SPEED_FAST;
 8000a42:	2302      	movs	r3, #2
 8000a44:	72bb      	strb	r3, [r7, #10]
	GPIOBtn.GPIO_PinConfig.GPIO_PinPuPdControl = GPIO_NO_PUPD;
 8000a46:	2300      	movs	r3, #0
 8000a48:	72fb      	strb	r3, [r7, #11]

	GPIO_Init(&GPIOBtn);
 8000a4a:	1d3b      	adds	r3, r7, #4
 8000a4c:	4618      	mov	r0, r3
 8000a4e:	f7ff fcbf 	bl	80003d0 <GPIO_Init>

}
 8000a52:	bf00      	nop
 8000a54:	3710      	adds	r7, #16
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}
 8000a5a:	bf00      	nop
 8000a5c:	40020000 	.word	0x40020000

08000a60 <LED_Init>:
void LED_Init(void)
{
 8000a60:	b580      	push	{r7, lr}
 8000a62:	b084      	sub	sp, #16
 8000a64:	af00      	add	r7, sp, #0
	GPIO_Handle_t GpioLed;
	GpioLed.pGPIOx = GPIOG;
 8000a66:	4b0c      	ldr	r3, [pc, #48]	; (8000a98 <LED_Init+0x38>)
 8000a68:	607b      	str	r3, [r7, #4]
	GpioLed.GPIO_PinConfig.GPIO_PinNumber 		= GPIO_PIN_NO_13;
 8000a6a:	230d      	movs	r3, #13
 8000a6c:	723b      	strb	r3, [r7, #8]
	GpioLed.GPIO_PinConfig.GPIO_PinMode 		= GPIO_MODE_OUTPUT;
 8000a6e:	2301      	movs	r3, #1
 8000a70:	727b      	strb	r3, [r7, #9]
	GpioLed.GPIO_PinConfig.GPIO_PinSpeed		= GPIO_SPEED_FAST;
 8000a72:	2302      	movs	r3, #2
 8000a74:	72bb      	strb	r3, [r7, #10]
	GpioLed.GPIO_PinConfig.GPIO_PinOPType 		= GPIO_OUT_TYPE_PP;
 8000a76:	2300      	movs	r3, #0
 8000a78:	733b      	strb	r3, [r7, #12]
	GpioLed.GPIO_PinConfig.GPIO_PinPuPdControl 	= GPIO_NO_PUPD;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	72fb      	strb	r3, [r7, #11]

	GPIO_PCLK_Control(GPIOG, ENABLE);
 8000a7e:	2101      	movs	r1, #1
 8000a80:	4805      	ldr	r0, [pc, #20]	; (8000a98 <LED_Init+0x38>)
 8000a82:	f7ff fbbb 	bl	80001fc <GPIO_PCLK_Control>

	GPIO_Init(&GpioLed);
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f7ff fca1 	bl	80003d0 <GPIO_Init>
}
 8000a8e:	bf00      	nop
 8000a90:	3710      	adds	r7, #16
 8000a92:	46bd      	mov	sp, r7
 8000a94:	bd80      	pop	{r7, pc}
 8000a96:	bf00      	nop
 8000a98:	40021800 	.word	0x40021800

08000a9c <main>:


int main(void)
{
 8000a9c:	b580      	push	{r7, lr}
 8000a9e:	b084      	sub	sp, #16
 8000aa0:	af00      	add	r7, sp, #0
	char user_data[] = "HEllo";
 8000aa2:	4a26      	ldr	r2, [pc, #152]	; (8000b3c <main+0xa0>)
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000aac:	6018      	str	r0, [r3, #0]
 8000aae:	3304      	adds	r3, #4
 8000ab0:	8019      	strh	r1, [r3, #0]

	GPIO_ButtonInit();
 8000ab2:	f7ff ffbd 	bl	8000a30 <GPIO_ButtonInit>
	LED_Init();
 8000ab6:	f7ff ffd3 	bl	8000a60 <LED_Init>

	//this function is used to initialize the GPIO pins to behave as SPI2 pins
	SPI2_GPIOInits();
 8000aba:	f7ff ff73 	bl	80009a4 <SPI2_GPIOInits>

	//This function is used to initialize the SPI2 peripheral parameters
	SPI2_Inits();
 8000abe:	f7ff ff99 	bl	80009f4 <SPI2_Inits>
	* making SSOE 1 does NSS output enable.
	* The NSS pin is automatically managed by the hardware.
	* i.e when SPE=1 , NSS will be pulled to low
	* and NSS pin will be high when SPE=0
	*/
	SPI_SSOEConfig(SPI2,ENABLE);
 8000ac2:	2101      	movs	r1, #1
 8000ac4:	481e      	ldr	r0, [pc, #120]	; (8000b40 <main+0xa4>)
 8000ac6:	f7ff ff3e 	bl	8000946 <SPI_SSOEConfig>

	while(1)
	{
		//wait till button is pressed
		while( ! GPIO_ReadFromInputPin(GPIOA,GPIO_PIN_NO_0) );
 8000aca:	bf00      	nop
 8000acc:	2100      	movs	r1, #0
 8000ace:	481d      	ldr	r0, [pc, #116]	; (8000b44 <main+0xa8>)
 8000ad0:	f7ff fe1a 	bl	8000708 <GPIO_ReadFromInputPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d0f8      	beq.n	8000acc <main+0x30>

		//to avoid button de-bouncing related issues 200ms of delay
		delay();
 8000ada:	f7ff ff4f 	bl	800097c <delay>

		//enable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,ENABLE);
 8000ade:	2101      	movs	r1, #1
 8000ae0:	4817      	ldr	r0, [pc, #92]	; (8000b40 <main+0xa4>)
 8000ae2:	f7ff ff15 	bl	8000910 <SPI_PeripheralControl>

		//first send length information
		uint8_t dataLen = strlen(user_data);
 8000ae6:	f107 0308 	add.w	r3, r7, #8
 8000aea:	4618      	mov	r0, r3
 8000aec:	f7ff fb7e 	bl	80001ec <strlen>
 8000af0:	4603      	mov	r3, r0
 8000af2:	b2db      	uxtb	r3, r3
 8000af4:	71fb      	strb	r3, [r7, #7]
		SPI_SendData(SPI2,&dataLen,1);
 8000af6:	1dfb      	adds	r3, r7, #7
 8000af8:	2201      	movs	r2, #1
 8000afa:	4619      	mov	r1, r3
 8000afc:	4810      	ldr	r0, [pc, #64]	; (8000b40 <main+0xa4>)
 8000afe:	f7ff fed1 	bl	80008a4 <SPI_SendData>

		//to send data
		SPI_SendData(SPI2,(uint8_t*)user_data,strlen(user_data));
 8000b02:	f107 0308 	add.w	r3, r7, #8
 8000b06:	4618      	mov	r0, r3
 8000b08:	f7ff fb70 	bl	80001ec <strlen>
 8000b0c:	4602      	mov	r2, r0
 8000b0e:	f107 0308 	add.w	r3, r7, #8
 8000b12:	4619      	mov	r1, r3
 8000b14:	480a      	ldr	r0, [pc, #40]	; (8000b40 <main+0xa4>)
 8000b16:	f7ff fec5 	bl	80008a4 <SPI_SendData>
		GPIO_ToggleOutputPin(GPIOG, GPIO_PIN_NO_13);
 8000b1a:	210d      	movs	r1, #13
 8000b1c:	480a      	ldr	r0, [pc, #40]	; (8000b48 <main+0xac>)
 8000b1e:	f7ff fe08 	bl	8000732 <GPIO_ToggleOutputPin>

		//lets confirm SPI is not busy
		while( SPI_GetFlagStatus(SPI2,SPI_BUSY_FLAG) );
 8000b22:	bf00      	nop
 8000b24:	2180      	movs	r1, #128	; 0x80
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <main+0xa4>)
 8000b28:	f7ff fea9 	bl	800087e <SPI_GetFlagStatus>
 8000b2c:	4603      	mov	r3, r0
 8000b2e:	2b00      	cmp	r3, #0
 8000b30:	d1f8      	bne.n	8000b24 <main+0x88>

		//Disable the SPI2 peripheral
		SPI_PeripheralControl(SPI2,DISABLE);
 8000b32:	2100      	movs	r1, #0
 8000b34:	4802      	ldr	r0, [pc, #8]	; (8000b40 <main+0xa4>)
 8000b36:	f7ff feeb 	bl	8000910 <SPI_PeripheralControl>
	{
 8000b3a:	e7c6      	b.n	8000aca <main+0x2e>
 8000b3c:	08000c00 	.word	0x08000c00
 8000b40:	40003800 	.word	0x40003800
 8000b44:	40020000 	.word	0x40020000
 8000b48:	40021800 	.word	0x40021800

08000b4c <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b4c:	480d      	ldr	r0, [pc, #52]	; (8000b84 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b4e:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b50:	480d      	ldr	r0, [pc, #52]	; (8000b88 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b52:	490e      	ldr	r1, [pc, #56]	; (8000b8c <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b54:	4a0e      	ldr	r2, [pc, #56]	; (8000b90 <LoopForever+0xe>)
  movs r3, #0
 8000b56:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b58:	e002      	b.n	8000b60 <LoopCopyDataInit>

08000b5a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b5a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b5c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b5e:	3304      	adds	r3, #4

08000b60 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b60:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b62:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b64:	d3f9      	bcc.n	8000b5a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b66:	4a0b      	ldr	r2, [pc, #44]	; (8000b94 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b68:	4c0b      	ldr	r4, [pc, #44]	; (8000b98 <LoopForever+0x16>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b6c:	e001      	b.n	8000b72 <LoopFillZerobss>

08000b6e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b6e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b70:	3204      	adds	r2, #4

08000b72 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b72:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b74:	d3fb      	bcc.n	8000b6e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit
 8000b76:	f3af 8000 	nop.w
/* Call static constructors */
  bl __libc_init_array
 8000b7a:	f000 f811 	bl	8000ba0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000b7e:	f7ff ff8d 	bl	8000a9c <main>

08000b82 <LoopForever>:

LoopForever:
    b LoopForever
 8000b82:	e7fe      	b.n	8000b82 <LoopForever>
  ldr   r0, =_estack
 8000b84:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000b88:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b8c:	20000000 	.word	0x20000000
  ldr r2, =_sidata
 8000b90:	08000c10 	.word	0x08000c10
  ldr r2, =_sbss
 8000b94:	20000000 	.word	0x20000000
  ldr r4, =_ebss
 8000b98:	2000001c 	.word	0x2000001c

08000b9c <ADC_IRQHandler>:
 * @retval : None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b9c:	e7fe      	b.n	8000b9c <ADC_IRQHandler>
	...

08000ba0 <__libc_init_array>:
 8000ba0:	b570      	push	{r4, r5, r6, lr}
 8000ba2:	4e0d      	ldr	r6, [pc, #52]	; (8000bd8 <__libc_init_array+0x38>)
 8000ba4:	4c0d      	ldr	r4, [pc, #52]	; (8000bdc <__libc_init_array+0x3c>)
 8000ba6:	1ba4      	subs	r4, r4, r6
 8000ba8:	10a4      	asrs	r4, r4, #2
 8000baa:	2500      	movs	r5, #0
 8000bac:	42a5      	cmp	r5, r4
 8000bae:	d109      	bne.n	8000bc4 <__libc_init_array+0x24>
 8000bb0:	4e0b      	ldr	r6, [pc, #44]	; (8000be0 <__libc_init_array+0x40>)
 8000bb2:	4c0c      	ldr	r4, [pc, #48]	; (8000be4 <__libc_init_array+0x44>)
 8000bb4:	f000 f818 	bl	8000be8 <_init>
 8000bb8:	1ba4      	subs	r4, r4, r6
 8000bba:	10a4      	asrs	r4, r4, #2
 8000bbc:	2500      	movs	r5, #0
 8000bbe:	42a5      	cmp	r5, r4
 8000bc0:	d105      	bne.n	8000bce <__libc_init_array+0x2e>
 8000bc2:	bd70      	pop	{r4, r5, r6, pc}
 8000bc4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bc8:	4798      	blx	r3
 8000bca:	3501      	adds	r5, #1
 8000bcc:	e7ee      	b.n	8000bac <__libc_init_array+0xc>
 8000bce:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8000bd2:	4798      	blx	r3
 8000bd4:	3501      	adds	r5, #1
 8000bd6:	e7f2      	b.n	8000bbe <__libc_init_array+0x1e>
 8000bd8:	08000c08 	.word	0x08000c08
 8000bdc:	08000c08 	.word	0x08000c08
 8000be0:	08000c08 	.word	0x08000c08
 8000be4:	08000c0c 	.word	0x08000c0c

08000be8 <_init>:
 8000be8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bea:	bf00      	nop
 8000bec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bee:	bc08      	pop	{r3}
 8000bf0:	469e      	mov	lr, r3
 8000bf2:	4770      	bx	lr

08000bf4 <_fini>:
 8000bf4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000bf6:	bf00      	nop
 8000bf8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8000bfa:	bc08      	pop	{r3}
 8000bfc:	469e      	mov	lr, r3
 8000bfe:	4770      	bx	lr
